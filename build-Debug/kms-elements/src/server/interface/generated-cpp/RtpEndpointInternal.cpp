/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "RtpEndpointInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "SDES.hpp"

namespace kurento
{

std::shared_ptr<MediaPipeline> RtpEndpointConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

std::shared_ptr<SDES> RtpEndpointConstructor::getCrypto ()
{
  if (!__isSetCrypto && !__isSetDefaultCrypto) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "{}";

      reader.parse (defaultValue, s.JsonValue["crypto"]);
      s.SerializeNVP (crypto);
      __isSetDefaultCrypto = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value crypto of RtpEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return crypto;
}

bool RtpEndpointConstructor::getUseIpv6 ()
{
  if (!__isSetUseIpv6 && !__isSetDefaultUseIpv6) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "false";

      reader.parse (defaultValue, s.JsonValue["useIpv6"]);
      s.SerializeNVP (useIpv6);
      __isSetDefaultUseIpv6 = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value useIpv6 of RtpEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return useIpv6;
}

void RtpEndpointConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    if (__isSetCrypto) {
      s.SerializeNVP (crypto);
    }

    if (__isSetUseIpv6) {
      s.SerializeNVP (useIpv6);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (s.JsonValue.isMember ("crypto") ) {
      if (s.JsonValue["crypto"].isConvertibleTo (Json::ValueType::objectValue) ) {
        __isSetCrypto = true;
        s.SerializeNVP (crypto);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'crypto' parameter should be a object");
      }
    }

    if (s.JsonValue.isMember ("useIpv6") ) {
      if (s.JsonValue["useIpv6"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetUseIpv6 = true;
        s.SerializeNVP (useIpv6);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'useIpv6' parameter should be a boolean");
      }
    }

  }
}

} /* kurento */
