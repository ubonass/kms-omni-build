/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "AlphaBlendingInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "HubPort.hpp"

namespace kurento
{

void AlphaBlendingMethodSetMaster::invoke (std::shared_ptr<AlphaBlending> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method AlphaBlending::setMaster");
  }

  return obj->setMaster (source, zOrder);
}

void AlphaBlendingMethodSetMaster::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (source);

    s.SerializeNVP (zOrder);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("source") || !s.JsonValue["source"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'source' parameter should be a string");
    }

    s.SerializeNVP (source);

    if (!s.JsonValue.isMember ("zOrder") || !s.JsonValue["zOrder"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'zOrder' parameter should be a integer");
    }

    s.SerializeNVP (zOrder);

  }
}

void AlphaBlendingMethodSetPortProperties::invoke (std::shared_ptr<AlphaBlending> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method AlphaBlending::setPortProperties");
  }

  return obj->setPortProperties (relativeX, relativeY, zOrder, relativeWidth, relativeHeight, port);
}

void AlphaBlendingMethodSetPortProperties::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (relativeX);

    s.SerializeNVP (relativeY);

    s.SerializeNVP (zOrder);

    s.SerializeNVP (relativeWidth);

    s.SerializeNVP (relativeHeight);

    s.SerializeNVP (port);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("relativeX") || !s.JsonValue["relativeX"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'relativeX' parameter should be a double");
    }

    s.SerializeNVP (relativeX);

    if (!s.JsonValue.isMember ("relativeY") || !s.JsonValue["relativeY"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'relativeY' parameter should be a double");
    }

    s.SerializeNVP (relativeY);

    if (!s.JsonValue.isMember ("zOrder") || !s.JsonValue["zOrder"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'zOrder' parameter should be a integer");
    }

    s.SerializeNVP (zOrder);

    if (!s.JsonValue.isMember ("relativeWidth") || !s.JsonValue["relativeWidth"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'relativeWidth' parameter should be a double");
    }

    s.SerializeNVP (relativeWidth);

    if (!s.JsonValue.isMember ("relativeHeight") || !s.JsonValue["relativeHeight"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'relativeHeight' parameter should be a double");
    }

    s.SerializeNVP (relativeHeight);

    if (!s.JsonValue.isMember ("port") || !s.JsonValue["port"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'port' parameter should be a string");
    }

    s.SerializeNVP (port);

  }
}

std::shared_ptr<MediaPipeline> AlphaBlendingConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

void AlphaBlendingConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

  }
}

} /* kurento */
