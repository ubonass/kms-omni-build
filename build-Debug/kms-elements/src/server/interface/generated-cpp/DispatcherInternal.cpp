/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "DispatcherInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "HubPort.hpp"

namespace kurento
{

void DispatcherMethodConnect::invoke (std::shared_ptr<Dispatcher> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method Dispatcher::connect");
  }

  return obj->connect (source, sink);
}

void DispatcherMethodConnect::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (source);

    s.SerializeNVP (sink);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("source") || !s.JsonValue["source"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'source' parameter should be a string");
    }

    s.SerializeNVP (source);

    if (!s.JsonValue.isMember ("sink") || !s.JsonValue["sink"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'sink' parameter should be a string");
    }

    s.SerializeNVP (sink);

  }
}

std::shared_ptr<MediaPipeline> DispatcherConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

void DispatcherConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

  }
}

} /* kurento */
