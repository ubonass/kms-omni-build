/* Autogenerated with kurento-module-creator */

#ifndef __ON_KEY_SOFT_LIMIT_HPP__
#define __ON_KEY_SOFT_LIMIT_HPP__

#include <json/json.h>
#include <memory>
#include "Media.hpp"

namespace kurento
{
class OnKeySoftLimit;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::OnKeySoftLimit> &object, JsonSerializer &s);
}


namespace kurento
{
class MediaType;
} /* kurento */

namespace kurento
{

class OnKeySoftLimit : public Media
{

public:

  OnKeySoftLimit (std::shared_ptr<MediaObject> source, const std::string &type, std::shared_ptr<MediaType> mediaType) : Media (source, type) {
      this->mediaType = mediaType;
  };

  OnKeySoftLimit (const OnKeySoftLimit &copy) : Media (copy) {
      this->mediaType = copy.mediaType;
  };

  OnKeySoftLimit (const Json::Value &value);

  virtual void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
  };

  virtual std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  };

  static std::string getName() {
    return "OnKeySoftLimit";
  }

  void Serialize (JsonSerializer &s) override;

protected:

  OnKeySoftLimit() = default;

private:
  std::shared_ptr<MediaType> mediaType;

  friend void kurento::Serialize (std::shared_ptr<kurento::OnKeySoftLimit> &event, JsonSerializer &s);
};

} /* kurento */

#endif /*  __ON_KEY_SOFT_LIMIT_HPP__ */
