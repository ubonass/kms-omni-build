/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "HttpPostEndpointInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{

std::shared_ptr<MediaPipeline> HttpPostEndpointConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

int HttpPostEndpointConstructor::getDisconnectionTimeout ()
{
  if (!__isSetDisconnectionTimeout && !__isSetDefaultDisconnectionTimeout) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "2";

      reader.parse (defaultValue, s.JsonValue["disconnectionTimeout"]);
      s.SerializeNVP (disconnectionTimeout);
      __isSetDefaultDisconnectionTimeout = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value disconnectionTimeout of HttpPostEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return disconnectionTimeout;
}

bool HttpPostEndpointConstructor::getUseEncodedMedia ()
{
  if (!__isSetUseEncodedMedia && !__isSetDefaultUseEncodedMedia) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "false";

      reader.parse (defaultValue, s.JsonValue["useEncodedMedia"]);
      s.SerializeNVP (useEncodedMedia);
      __isSetDefaultUseEncodedMedia = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value useEncodedMedia of HttpPostEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return useEncodedMedia;
}

void HttpPostEndpointConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    if (__isSetDisconnectionTimeout) {
      s.SerializeNVP (disconnectionTimeout);
    }

    if (__isSetUseEncodedMedia) {
      s.SerializeNVP (useEncodedMedia);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (s.JsonValue.isMember ("disconnectionTimeout") ) {
      if (s.JsonValue["disconnectionTimeout"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetDisconnectionTimeout = true;
        s.SerializeNVP (disconnectionTimeout);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'disconnectionTimeout' parameter should be a integer");
      }
    }

    if (s.JsonValue.isMember ("useEncodedMedia") ) {
      if (s.JsonValue["useEncodedMedia"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetUseEncodedMedia = true;
        s.SerializeNVP (useEncodedMedia);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'useEncodedMedia' parameter should be a boolean");
      }
    }

  }
}

} /* kurento */
