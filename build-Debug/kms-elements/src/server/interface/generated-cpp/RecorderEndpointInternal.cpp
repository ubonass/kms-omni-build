/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "RecorderEndpointInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "MediaProfileSpecType.hpp"

namespace kurento
{

void RecorderEndpointMethodRecord::invoke (std::shared_ptr<RecorderEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method RecorderEndpoint::record");
  }

  return obj->record ();
}

void RecorderEndpointMethodRecord::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

void RecorderEndpointMethodStopAndWait::invoke (std::shared_ptr<RecorderEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method RecorderEndpoint::stopAndWait");
  }

  return obj->stopAndWait ();
}

void RecorderEndpointMethodStopAndWait::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

std::shared_ptr<MediaPipeline> RecorderEndpointConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

std::string RecorderEndpointConstructor::getUri ()
{
  return uri;
}

std::shared_ptr<MediaProfileSpecType> RecorderEndpointConstructor::getMediaProfile ()
{
  if (!__isSetMediaProfile && !__isSetDefaultMediaProfile) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "\"WEBM\"";

      reader.parse (defaultValue, s.JsonValue["mediaProfile"]);
      s.SerializeNVP (mediaProfile);
      __isSetDefaultMediaProfile = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value mediaProfile of RecorderEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return mediaProfile;
}

bool RecorderEndpointConstructor::getStopOnEndOfStream ()
{
  if (!__isSetStopOnEndOfStream && !__isSetDefaultStopOnEndOfStream) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "false";

      reader.parse (defaultValue, s.JsonValue["stopOnEndOfStream"]);
      s.SerializeNVP (stopOnEndOfStream);
      __isSetDefaultStopOnEndOfStream = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value stopOnEndOfStream of RecorderEndpoint constructor, check your module: " << e.what() << std::endl;
    }
  }

  return stopOnEndOfStream;
}

void RecorderEndpointConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    s.SerializeNVP (uri);

    if (__isSetMediaProfile) {
      s.SerializeNVP (mediaProfile);
    }

    if (__isSetStopOnEndOfStream) {
      s.SerializeNVP (stopOnEndOfStream);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (!s.JsonValue.isMember ("uri") || !s.JsonValue["uri"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'uri' parameter should be a string");
    }

    s.SerializeNVP (uri);

    if (s.JsonValue.isMember ("mediaProfile") ) {
      if (s.JsonValue["mediaProfile"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaProfile = true;
        s.SerializeNVP (mediaProfile);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaProfile' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("stopOnEndOfStream") ) {
      if (s.JsonValue["stopOnEndOfStream"].isConvertibleTo (Json::ValueType::booleanValue) ) {
        __isSetStopOnEndOfStream = true;
        s.SerializeNVP (stopOnEndOfStream);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'stopOnEndOfStream' parameter should be a boolean");
      }
    }

  }
}

} /* kurento */
