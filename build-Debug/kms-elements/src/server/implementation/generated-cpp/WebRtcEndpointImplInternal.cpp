/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include "CertificateKeyType.hpp"
#include "IceCandidate.hpp"
#include "IceCandidatePair.hpp"
#include "IceConnection.hpp"
#include "WebRtcEndpointImpl.hpp"
#include "WebRtcEndpointImplFactory.hpp"
#include "WebRtcEndpointInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

MediaObjectImpl *WebRtcEndpointImplFactory::createObjectPointer (const boost::property_tree::ptree &conf, const Json::Value &params) const
{
  kurento::JsonSerializer s (false);
  WebRtcEndpointConstructor constructor;

  s.JsonValue = params;
  constructor.Serialize (s);

  return createObject (conf, constructor.getMediaPipeline(), constructor.getRecvonly(), constructor.getSendonly(), constructor.getUseDataChannels(), constructor.getCertificateKeyType() );
}

void
WebRtcEndpointImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "gatherCandidates") {
    kurento::JsonSerializer s (false);
    WebRtcEndpointMethodGatherCandidates method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<WebRtcEndpoint> (obj) );
    return;
  }

  if (methodName == "addIceCandidate") {
    kurento::JsonSerializer s (false);
    WebRtcEndpointMethodAddIceCandidate method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<WebRtcEndpoint> (obj) );
    return;
  }

  if (methodName == "createDataChannel") {
    kurento::JsonSerializer s (false);
    WebRtcEndpointMethodCreateDataChannel method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<WebRtcEndpoint> (obj) );
    return;
  }

  if (methodName == "closeDataChannel") {
    kurento::JsonSerializer s (false);
    WebRtcEndpointMethodCloseDataChannel method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<WebRtcEndpoint> (obj) );
    return;
  }

  if (methodName == "getStunServerAddress") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->getStunServerAddress ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setStunServerAddress") {
    kurento::JsonSerializer s (false);
    std::string stunServerAddress;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("stunServerAddress") || !s.JsonValue["stunServerAddress"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'stunServerAddress' parameter should be a string");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (stunServerAddress);
      std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->setStunServerAddress (stunServerAddress);
    }
    return;
  }

  if (methodName == "getStunServerPort") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->getStunServerPort ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setStunServerPort") {
    kurento::JsonSerializer s (false);
    int stunServerPort;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("stunServerPort") || !s.JsonValue["stunServerPort"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'stunServerPort' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (stunServerPort);
      std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->setStunServerPort (stunServerPort);
    }
    return;
  }

  if (methodName == "getTurnUrl") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->getTurnUrl ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setTurnUrl") {
    kurento::JsonSerializer s (false);
    std::string turnUrl;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("turnUrl") || !s.JsonValue["turnUrl"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'turnUrl' parameter should be a string");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (turnUrl);
      std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->setTurnUrl (turnUrl);
    }
    return;
  }

  if (methodName == "getICECandidatePairs") {
    std::vector<std::shared_ptr<IceCandidatePair>> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->getICECandidatePairs ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getIceConnectionState") {
    std::vector<std::shared_ptr<IceConnection>> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<WebRtcEndpoint> (obj)->getIceConnectionState ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  BaseRtpEndpointImpl::invoke (obj, methodName, params, response);
}

bool
WebRtcEndpointImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("OnIceCandidate" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalOnIceCandidate.connect ([ &, wh] (OnIceCandidate event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<OnIceCandidate> ev_ref (new OnIceCandidate(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "OnIceCandidate";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("IceCandidateFound" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalIceCandidateFound.connect ([ &, wh] (IceCandidateFound event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<IceCandidateFound> ev_ref (new IceCandidateFound(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "IceCandidateFound";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("OnIceGatheringDone" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalOnIceGatheringDone.connect ([ &, wh] (OnIceGatheringDone event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<OnIceGatheringDone> ev_ref (new OnIceGatheringDone(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "OnIceGatheringDone";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("IceGatheringDone" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalIceGatheringDone.connect ([ &, wh] (IceGatheringDone event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<IceGatheringDone> ev_ref (new IceGatheringDone(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "IceGatheringDone";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("OnIceComponentStateChanged" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalOnIceComponentStateChanged.connect ([ &, wh] (OnIceComponentStateChanged event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<OnIceComponentStateChanged> ev_ref (new OnIceComponentStateChanged(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "OnIceComponentStateChanged";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("IceComponentStateChange" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalIceComponentStateChange.connect ([ &, wh] (IceComponentStateChange event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<IceComponentStateChange> ev_ref (new IceComponentStateChange(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "IceComponentStateChange";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("OnDataChannelOpened" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalOnDataChannelOpened.connect ([ &, wh] (OnDataChannelOpened event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<OnDataChannelOpened> ev_ref (new OnDataChannelOpened(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "OnDataChannelOpened";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("DataChannelOpen" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalDataChannelOpen.connect ([ &, wh] (DataChannelOpen event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<DataChannelOpen> ev_ref (new DataChannelOpen(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "DataChannelOpen";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("OnDataChannelClosed" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalOnDataChannelClosed.connect ([ &, wh] (OnDataChannelClosed event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<OnDataChannelClosed> ev_ref (new OnDataChannelClosed(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "OnDataChannelClosed";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("DataChannelClose" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalDataChannelClose.connect ([ &, wh] (DataChannelClose event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<DataChannelClose> ev_ref (new DataChannelClose(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "DataChannelClose";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("NewCandidatePairSelected" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalNewCandidatePairSelected.connect ([ &, wh] (NewCandidatePairSelected event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<NewCandidatePairSelected> ev_ref (new NewCandidatePairSelected(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "NewCandidatePairSelected";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return BaseRtpEndpointImpl::connect (eventType, handler);
}

void
WebRtcEndpointImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'WebRtcEndpointImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::WebRtcEndpointImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::WebRtcEndpointImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::WebRtcEndpointImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::WebRtcEndpoint> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::WebRtcEndpointImpl> aux = std::dynamic_pointer_cast<kurento::WebRtcEndpointImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::WebRtcEndpoint> (aux);
}

} /* kurento */