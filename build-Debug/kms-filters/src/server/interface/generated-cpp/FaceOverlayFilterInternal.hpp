/* Autogenerated with kurento-module-creator */

#ifndef __FACE_OVERLAY_FILTER_INTERNAL_HPP__
#define __FACE_OVERLAY_FILTER_INTERNAL_HPP__

#include "FaceOverlayFilter.hpp"

namespace kurento
{
class JsonSerializer;
}

namespace kurento
{
class MediaPipeline;
} /* kurento */

namespace kurento
{

class FaceOverlayFilterMethodUnsetOverlayedImage
{
public:
  FaceOverlayFilterMethodUnsetOverlayedImage() = default;
  ~FaceOverlayFilterMethodUnsetOverlayedImage() = default;

  void invoke (std::shared_ptr<FaceOverlayFilter> obj);
  void Serialize (JsonSerializer &serializer);

};

class FaceOverlayFilterMethodSetOverlayedImage
{
public:
  FaceOverlayFilterMethodSetOverlayedImage() = default;
  ~FaceOverlayFilterMethodSetOverlayedImage() = default;

  void invoke (std::shared_ptr<FaceOverlayFilter> obj);
  void Serialize (JsonSerializer &serializer);

  std::string getUri () {
    return uri;
  }

  void setUri (const std::string &uri) {
    this->uri = uri;
  }

  float getOffsetXPercent () {
    return offsetXPercent;
  }

  void setOffsetXPercent (float offsetXPercent) {
    this->offsetXPercent = offsetXPercent;
  }

  float getOffsetYPercent () {
    return offsetYPercent;
  }

  void setOffsetYPercent (float offsetYPercent) {
    this->offsetYPercent = offsetYPercent;
  }

  float getWidthPercent () {
    return widthPercent;
  }

  void setWidthPercent (float widthPercent) {
    this->widthPercent = widthPercent;
  }

  float getHeightPercent () {
    return heightPercent;
  }

  void setHeightPercent (float heightPercent) {
    this->heightPercent = heightPercent;
  }

private:
  std::string uri;
  float offsetXPercent;
  float offsetYPercent;
  float widthPercent;
  float heightPercent;
};

class FaceOverlayFilterConstructor
{
public:
  FaceOverlayFilterConstructor() = default;
  ~FaceOverlayFilterConstructor() = default;

  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaPipeline> getMediaPipeline ();

  void setMediaPipeline (std::shared_ptr<MediaPipeline> mediaPipeline) {
    this->mediaPipeline = mediaPipeline;
  }

private:
  std::shared_ptr<MediaPipeline> mediaPipeline;
};

} /* kurento */

#endif /*  __FACE_OVERLAY_FILTER_INTERNAL_HPP__ */
