/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "GStreamerFilterInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"
#include "FilterType.hpp"

namespace kurento
{

void GStreamerFilterMethodSetElementProperty::invoke (std::shared_ptr<GStreamerFilter> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method GStreamerFilter::setElementProperty");
  }

  return obj->setElementProperty (propertyName, propertyValue);
}

void GStreamerFilterMethodSetElementProperty::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (propertyName);

    s.SerializeNVP (propertyValue);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("propertyName") || !s.JsonValue["propertyName"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'propertyName' parameter should be a string");
    }

    s.SerializeNVP (propertyName);

    if (!s.JsonValue.isMember ("propertyValue") || !s.JsonValue["propertyValue"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'propertyValue' parameter should be a string");
    }

    s.SerializeNVP (propertyValue);

  }
}

std::shared_ptr<MediaPipeline> GStreamerFilterConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

std::string GStreamerFilterConstructor::getCommand ()
{
  return command;
}

std::shared_ptr<FilterType> GStreamerFilterConstructor::getFilterType ()
{
  if (!__isSetFilterType && !__isSetDefaultFilterType) {
    try {
      kurento::JsonSerializer s (false);
      Json::Reader reader;
      std::string defaultValue = "\"AUTODETECT\"";

      reader.parse (defaultValue, s.JsonValue["filterType"]);
      s.SerializeNVP (filterType);
      __isSetDefaultFilterType = true;
    } catch (std::exception &e) {
      std::cerr << "Unexpected exception deserializing default value filterType of GStreamerFilter constructor, check your module: " << e.what() << std::endl;
    }
  }

  return filterType;
}

void GStreamerFilterConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

    s.SerializeNVP (command);

    if (__isSetFilterType) {
      s.SerializeNVP (filterType);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

    if (!s.JsonValue.isMember ("command") || !s.JsonValue["command"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'command' parameter should be a string");
    }

    s.SerializeNVP (command);

    if (s.JsonValue.isMember ("filterType") ) {
      if (s.JsonValue["filterType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetFilterType = true;
        s.SerializeNVP (filterType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'filterType' parameter should be a string");
      }
    }

  }
}

} /* kurento */
