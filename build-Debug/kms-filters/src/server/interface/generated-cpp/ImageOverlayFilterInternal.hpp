/* Autogenerated with kurento-module-creator */

#ifndef __IMAGE_OVERLAY_FILTER_INTERNAL_HPP__
#define __IMAGE_OVERLAY_FILTER_INTERNAL_HPP__

#include "ImageOverlayFilter.hpp"

namespace kurento
{
class JsonSerializer;
}

namespace kurento
{
class MediaPipeline;
} /* kurento */

namespace kurento
{

class ImageOverlayFilterMethodRemoveImage
{
public:
  ImageOverlayFilterMethodRemoveImage() = default;
  ~ImageOverlayFilterMethodRemoveImage() = default;

  void invoke (std::shared_ptr<ImageOverlayFilter> obj);
  void Serialize (JsonSerializer &serializer);

  std::string getId () {
    return id;
  }

  void setId (const std::string &id) {
    this->id = id;
  }

private:
  std::string id;
};

class ImageOverlayFilterMethodAddImage
{
public:
  ImageOverlayFilterMethodAddImage() = default;
  ~ImageOverlayFilterMethodAddImage() = default;

  void invoke (std::shared_ptr<ImageOverlayFilter> obj);
  void Serialize (JsonSerializer &serializer);

  std::string getId () {
    return id;
  }

  void setId (const std::string &id) {
    this->id = id;
  }

  std::string getUri () {
    return uri;
  }

  void setUri (const std::string &uri) {
    this->uri = uri;
  }

  float getOffsetXPercent () {
    return offsetXPercent;
  }

  void setOffsetXPercent (float offsetXPercent) {
    this->offsetXPercent = offsetXPercent;
  }

  float getOffsetYPercent () {
    return offsetYPercent;
  }

  void setOffsetYPercent (float offsetYPercent) {
    this->offsetYPercent = offsetYPercent;
  }

  float getWidthPercent () {
    return widthPercent;
  }

  void setWidthPercent (float widthPercent) {
    this->widthPercent = widthPercent;
  }

  float getHeightPercent () {
    return heightPercent;
  }

  void setHeightPercent (float heightPercent) {
    this->heightPercent = heightPercent;
  }

  bool getKeepAspectRatio () {
    return keepAspectRatio;
  }

  void setKeepAspectRatio (bool keepAspectRatio) {
    this->keepAspectRatio = keepAspectRatio;
  }

  bool getCenter () {
    return center;
  }

  void setCenter (bool center) {
    this->center = center;
  }

private:
  std::string id;
  std::string uri;
  float offsetXPercent;
  float offsetYPercent;
  float widthPercent;
  float heightPercent;
  bool keepAspectRatio;
  bool center;
};

class ImageOverlayFilterConstructor
{
public:
  ImageOverlayFilterConstructor() = default;
  ~ImageOverlayFilterConstructor() = default;

  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaPipeline> getMediaPipeline ();

  void setMediaPipeline (std::shared_ptr<MediaPipeline> mediaPipeline) {
    this->mediaPipeline = mediaPipeline;
  }

private:
  std::shared_ptr<MediaPipeline> mediaPipeline;
};

} /* kurento */

#endif /*  __IMAGE_OVERLAY_FILTER_INTERNAL_HPP__ */
