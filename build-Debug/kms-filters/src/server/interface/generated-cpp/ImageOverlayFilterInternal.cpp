/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "ImageOverlayFilterInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaPipeline.hpp"

namespace kurento
{

void ImageOverlayFilterMethodRemoveImage::invoke (std::shared_ptr<ImageOverlayFilter> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method ImageOverlayFilter::removeImage");
  }

  return obj->removeImage (id);
}

void ImageOverlayFilterMethodRemoveImage::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (id);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("id") || !s.JsonValue["id"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'id' parameter should be a string");
    }

    s.SerializeNVP (id);

  }
}

void ImageOverlayFilterMethodAddImage::invoke (std::shared_ptr<ImageOverlayFilter> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method ImageOverlayFilter::addImage");
  }

  return obj->addImage (id, uri, offsetXPercent, offsetYPercent, widthPercent, heightPercent, keepAspectRatio, center);
}

void ImageOverlayFilterMethodAddImage::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (id);

    s.SerializeNVP (uri);

    s.SerializeNVP (offsetXPercent);

    s.SerializeNVP (offsetYPercent);

    s.SerializeNVP (widthPercent);

    s.SerializeNVP (heightPercent);

    s.SerializeNVP (keepAspectRatio);

    s.SerializeNVP (center);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("id") || !s.JsonValue["id"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'id' parameter should be a string");
    }

    s.SerializeNVP (id);

    if (!s.JsonValue.isMember ("uri") || !s.JsonValue["uri"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'uri' parameter should be a string");
    }

    s.SerializeNVP (uri);

    if (!s.JsonValue.isMember ("offsetXPercent") || !s.JsonValue["offsetXPercent"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'offsetXPercent' parameter should be a double");
    }

    s.SerializeNVP (offsetXPercent);

    if (!s.JsonValue.isMember ("offsetYPercent") || !s.JsonValue["offsetYPercent"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'offsetYPercent' parameter should be a double");
    }

    s.SerializeNVP (offsetYPercent);

    if (!s.JsonValue.isMember ("widthPercent") || !s.JsonValue["widthPercent"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'widthPercent' parameter should be a double");
    }

    s.SerializeNVP (widthPercent);

    if (!s.JsonValue.isMember ("heightPercent") || !s.JsonValue["heightPercent"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'heightPercent' parameter should be a double");
    }

    s.SerializeNVP (heightPercent);

    if (!s.JsonValue.isMember ("keepAspectRatio") || !s.JsonValue["keepAspectRatio"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'keepAspectRatio' parameter should be a boolean");
    }

    s.SerializeNVP (keepAspectRatio);

    if (!s.JsonValue.isMember ("center") || !s.JsonValue["center"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'center' parameter should be a boolean");
    }

    s.SerializeNVP (center);

  }
}

std::shared_ptr<MediaPipeline> ImageOverlayFilterConstructor::getMediaPipeline ()
{
  return mediaPipeline;
}

void ImageOverlayFilterConstructor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaPipeline);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'constructorParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaPipeline") || !s.JsonValue["mediaPipeline"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaPipeline' parameter should be a string");
    }

    s.SerializeNVP (mediaPipeline);

  }
}

} /* kurento */
