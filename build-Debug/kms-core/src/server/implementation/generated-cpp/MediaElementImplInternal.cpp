/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaType.hpp"
#include "ElementConnectionData.hpp"
#include "MediaElementImpl.hpp"
#include "AudioCaps.hpp"
#include "VideoCaps.hpp"
#include "GstreamerDotDetails.hpp"
#include "Stats.hpp"
#include "MediaElementImpl.hpp"
#include "MediaElementImplFactory.hpp"
#include "MediaElementInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

void
MediaElementImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "getSourceConnections") {
    kurento::JsonSerializer s (false);
    MediaElementMethodGetSourceConnections method;
    JsonSerializer responseSerializer (true);
    std::vector<std::shared_ptr<ElementConnectionData>> ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getSinkConnections") {
    kurento::JsonSerializer s (false);
    MediaElementMethodGetSinkConnections method;
    JsonSerializer responseSerializer (true);
    std::vector<std::shared_ptr<ElementConnectionData>> ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "connect") {
    kurento::JsonSerializer s (false);
    MediaElementMethodConnect method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    return;
  }

  if (methodName == "disconnect") {
    kurento::JsonSerializer s (false);
    MediaElementMethodDisconnect method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    return;
  }

  if (methodName == "setAudioFormat") {
    kurento::JsonSerializer s (false);
    MediaElementMethodSetAudioFormat method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    return;
  }

  if (methodName == "setVideoFormat") {
    kurento::JsonSerializer s (false);
    MediaElementMethodSetVideoFormat method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    return;
  }

  if (methodName == "getGstreamerDot") {
    kurento::JsonSerializer s (false);
    MediaElementMethodGetGstreamerDot method;
    JsonSerializer responseSerializer (true);
    std::string ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setOutputBitrate") {
    kurento::JsonSerializer s (false);
    MediaElementMethodSetOutputBitrate method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    return;
  }

  if (methodName == "getStats") {
    kurento::JsonSerializer s (false);
    MediaElementMethodGetStats method;
    JsonSerializer responseSerializer (true);
    std::map <std::string,std::shared_ptr<Stats>> ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "isMediaFlowingIn") {
    kurento::JsonSerializer s (false);
    MediaElementMethodIsMediaFlowingIn method;
    JsonSerializer responseSerializer (true);
    bool ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "isMediaFlowingOut") {
    kurento::JsonSerializer s (false);
    MediaElementMethodIsMediaFlowingOut method;
    JsonSerializer responseSerializer (true);
    bool ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "isMediaTranscoding") {
    kurento::JsonSerializer s (false);
    MediaElementMethodIsMediaTranscoding method;
    JsonSerializer responseSerializer (true);
    bool ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaElement> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getMinOuputBitrate") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaElement> (obj)->getMinOuputBitrate ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMinOuputBitrate") {
    kurento::JsonSerializer s (false);
    int minOuputBitrate;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("minOuputBitrate") || !s.JsonValue["minOuputBitrate"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minOuputBitrate' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (minOuputBitrate);
      std::dynamic_pointer_cast<MediaElement> (obj)->setMinOuputBitrate (minOuputBitrate);
    }
    return;
  }

  if (methodName == "getMinOutputBitrate") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaElement> (obj)->getMinOutputBitrate ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMinOutputBitrate") {
    kurento::JsonSerializer s (false);
    int minOutputBitrate;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("minOutputBitrate") || !s.JsonValue["minOutputBitrate"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minOutputBitrate' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (minOutputBitrate);
      std::dynamic_pointer_cast<MediaElement> (obj)->setMinOutputBitrate (minOutputBitrate);
    }
    return;
  }

  if (methodName == "getMaxOuputBitrate") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaElement> (obj)->getMaxOuputBitrate ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMaxOuputBitrate") {
    kurento::JsonSerializer s (false);
    int maxOuputBitrate;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("maxOuputBitrate") || !s.JsonValue["maxOuputBitrate"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'maxOuputBitrate' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (maxOuputBitrate);
      std::dynamic_pointer_cast<MediaElement> (obj)->setMaxOuputBitrate (maxOuputBitrate);
    }
    return;
  }

  if (methodName == "getMaxOutputBitrate") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaElement> (obj)->getMaxOutputBitrate ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMaxOutputBitrate") {
    kurento::JsonSerializer s (false);
    int maxOutputBitrate;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("maxOutputBitrate") || !s.JsonValue["maxOutputBitrate"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'maxOutputBitrate' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (maxOutputBitrate);
      std::dynamic_pointer_cast<MediaElement> (obj)->setMaxOutputBitrate (maxOutputBitrate);
    }
    return;
  }

  MediaObjectImpl::invoke (obj, methodName, params, response);
}

bool
MediaElementImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("ElementConnected" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalElementConnected.connect ([ &, wh] (ElementConnected event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<ElementConnected> ev_ref (new ElementConnected(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "ElementConnected";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("ElementDisconnected" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalElementDisconnected.connect ([ &, wh] (ElementDisconnected event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<ElementDisconnected> ev_ref (new ElementDisconnected(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "ElementDisconnected";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("MediaFlowOutStateChange" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalMediaFlowOutStateChange.connect ([ &, wh] (MediaFlowOutStateChange event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<MediaFlowOutStateChange> ev_ref (new MediaFlowOutStateChange(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "MediaFlowOutStateChange";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("MediaFlowInStateChange" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalMediaFlowInStateChange.connect ([ &, wh] (MediaFlowInStateChange event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<MediaFlowInStateChange> ev_ref (new MediaFlowInStateChange(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "MediaFlowInStateChange";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("MediaTranscodingStateChange" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalMediaTranscodingStateChange.connect ([ &, wh] (MediaTranscodingStateChange event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<MediaTranscodingStateChange> ev_ref (new MediaTranscodingStateChange(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "MediaTranscodingStateChange";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return MediaObjectImpl::connect (eventType, handler);
}

void
MediaElementImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'MediaElementImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::MediaElementImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::MediaElementImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::MediaElementImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::MediaElement> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::MediaElementImpl> aux = std::dynamic_pointer_cast<kurento::MediaElementImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::MediaElement> (aux);
}

} /* kurento */