/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "UriEndpointState.hpp"
#include "UriEndpointImpl.hpp"
#include "UriEndpointImplFactory.hpp"
#include "UriEndpointInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

void
UriEndpointImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "pause") {
    kurento::JsonSerializer s (false);
    UriEndpointMethodPause method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<UriEndpoint> (obj) );
    return;
  }

  if (methodName == "stop") {
    kurento::JsonSerializer s (false);
    UriEndpointMethodStop method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<UriEndpoint> (obj) );
    return;
  }

  if (methodName == "getUri") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<UriEndpoint> (obj)->getUri ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getState") {
    std::shared_ptr<UriEndpointState> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<UriEndpoint> (obj)->getState ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  EndpointImpl::invoke (obj, methodName, params, response);
}

bool
UriEndpointImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("UriEndpointStateChanged" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalUriEndpointStateChanged.connect ([ &, wh] (UriEndpointStateChanged event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<UriEndpointStateChanged> ev_ref (new UriEndpointStateChanged(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "UriEndpointStateChanged";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return EndpointImpl::connect (eventType, handler);
}

void
UriEndpointImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'UriEndpointImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::UriEndpointImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::UriEndpointImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::UriEndpointImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::UriEndpoint> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::UriEndpointImpl> aux = std::dynamic_pointer_cast<kurento::UriEndpointImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::UriEndpoint> (aux);
}

} /* kurento */