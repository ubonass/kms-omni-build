/* Autogenerated with kurento-module-creator */

#include "MediaObjectImpl.hpp"
#include "ServerManagerImpl.hpp"
#include "SessionEndpointImpl.hpp"
#include "HubImpl.hpp"
#include "FilterImpl.hpp"
#include "EndpointImpl.hpp"
#include "HubPortImpl.hpp"
#include "PassThroughImpl.hpp"
#include "UriEndpointImpl.hpp"
#include "MediaPipelineImpl.hpp"
#include "SdpEndpointImpl.hpp"
#include "BaseRtpEndpointImpl.hpp"
#include "MediaElementImpl.hpp"
#include "RaiseBase.hpp"
#include "Error.hpp"
#include "MediaSessionTerminated.hpp"
#include "MediaSessionStarted.hpp"
#include "Media.hpp"
#include "ObjectCreated.hpp"
#include "ObjectDestroyed.hpp"
#include "MediaStateChanged.hpp"
#include "ConnectionStateChanged.hpp"
#include "MediaFlowOutStateChange.hpp"
#include "MediaFlowInStateChange.hpp"
#include "MediaTranscodingStateChange.hpp"
#include "ElementConnected.hpp"
#include "ElementDisconnected.hpp"
#include "UriEndpointStateChanged.hpp"
#include "UriEndpointState.hpp"
#include "ServerInfo.hpp"
#include "ServerType.hpp"
#include "GstreamerDotDetails.hpp"
#include "ModuleInfo.hpp"
#include "MediaState.hpp"
#include "MediaFlowState.hpp"
#include "MediaTranscodingState.hpp"
#include "ConnectionState.hpp"
#include "MediaType.hpp"
#include "FilterType.hpp"
#include "VideoCodec.hpp"
#include "AudioCodec.hpp"
#include "Fraction.hpp"
#include "AudioCaps.hpp"
#include "VideoCaps.hpp"
#include "ElementConnectionData.hpp"
#include "Tag.hpp"
#include "StatsType.hpp"
#include "MediaLatencyStat.hpp"
#include "Stats.hpp"
#include "ElementStats.hpp"
#include "EndpointStats.hpp"
#include "RTCStats.hpp"
#include "RTCRTPStreamStats.hpp"
#include "RTCCodec.hpp"
#include "RTCInboundRTPStreamStats.hpp"
#include "RTCOutboundRTPStreamStats.hpp"
#include "RTCPeerConnectionStats.hpp"
#include "RTCMediaStreamStats.hpp"
#include "RTCMediaStreamTrackStats.hpp"
#include "RTCDataChannelState.hpp"
#include "RTCDataChannelStats.hpp"
#include "RTCTransportStats.hpp"
#include "RTCStatsIceCandidateType.hpp"
#include "RTCIceCandidateAttributes.hpp"
#include "RTCStatsIceCandidatePairState.hpp"
#include "RTCIceCandidatePairStats.hpp"
#include "RTCCertificateStats.hpp"
#include "CodecConfiguration.hpp"
#include "RembParams.hpp"

#include <jsonrpc/JsonSerializer.hpp>

namespace kurento
{

void dummyCore ()
{
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaObject> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ServerManager> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<SessionEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Hub> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Filter> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Endpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<HubPort> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<PassThrough> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<UriEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaPipeline> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<SdpEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<BaseRtpEndpoint> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaElement> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RaiseBase> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Error> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaSessionTerminated> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaSessionStarted> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Media> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ObjectCreated> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ObjectDestroyed> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaStateChanged> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ConnectionStateChanged> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaFlowOutStateChange> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaFlowInStateChange> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaTranscodingStateChange> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ElementConnected> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ElementDisconnected> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<UriEndpointStateChanged> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<UriEndpointState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ServerInfo> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ServerType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<GstreamerDotDetails> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ModuleInfo> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaFlowState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaTranscodingState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ConnectionState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<FilterType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<VideoCodec> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<AudioCodec> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Fraction> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<AudioCaps> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<VideoCaps> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ElementConnectionData> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Tag> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<StatsType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<MediaLatencyStat> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<Stats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<ElementStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<EndpointStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCRTPStreamStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCCodec> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCInboundRTPStreamStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCOutboundRTPStreamStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCPeerConnectionStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCMediaStreamStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCMediaStreamTrackStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCDataChannelState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCDataChannelStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCTransportStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCStatsIceCandidateType> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCIceCandidateAttributes> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCStatsIceCandidatePairState> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCIceCandidatePairStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RTCCertificateStats> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<CodecConfiguration> object;

    s.SerializeNVP (object);
  }
  {
    JsonSerializer s (true);
    std::shared_ptr<RembParams> object;

    s.SerializeNVP (object);
  }
}

} /* kurento */
