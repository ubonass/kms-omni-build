/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaState.hpp"
#include "ConnectionState.hpp"
#include "RembParams.hpp"
#include "BaseRtpEndpointImpl.hpp"
#include "BaseRtpEndpointImplFactory.hpp"
#include "BaseRtpEndpointInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

void
BaseRtpEndpointImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "getMinVideoRecvBandwidth") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getMinVideoRecvBandwidth ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMinVideoRecvBandwidth") {
    kurento::JsonSerializer s (false);
    int minVideoRecvBandwidth;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("minVideoRecvBandwidth") || !s.JsonValue["minVideoRecvBandwidth"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minVideoRecvBandwidth' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (minVideoRecvBandwidth);
      std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->setMinVideoRecvBandwidth (minVideoRecvBandwidth);
    }
    return;
  }

  if (methodName == "getMinVideoSendBandwidth") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getMinVideoSendBandwidth ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMinVideoSendBandwidth") {
    kurento::JsonSerializer s (false);
    int minVideoSendBandwidth;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("minVideoSendBandwidth") || !s.JsonValue["minVideoSendBandwidth"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'minVideoSendBandwidth' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (minVideoSendBandwidth);
      std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->setMinVideoSendBandwidth (minVideoSendBandwidth);
    }
    return;
  }

  if (methodName == "getMaxVideoSendBandwidth") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getMaxVideoSendBandwidth ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setMaxVideoSendBandwidth") {
    kurento::JsonSerializer s (false);
    int maxVideoSendBandwidth;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("maxVideoSendBandwidth") || !s.JsonValue["maxVideoSendBandwidth"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'maxVideoSendBandwidth' parameter should be a integer");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (maxVideoSendBandwidth);
      std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->setMaxVideoSendBandwidth (maxVideoSendBandwidth);
    }
    return;
  }

  if (methodName == "getMediaState") {
    std::shared_ptr<MediaState> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getMediaState ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getConnectionState") {
    std::shared_ptr<ConnectionState> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getConnectionState ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getRembParams") {
    std::shared_ptr<RembParams> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->getRembParams ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setRembParams") {
    kurento::JsonSerializer s (false);
    std::shared_ptr<RembParams> rembParams;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("rembParams") || !s.JsonValue["rembParams"].isConvertibleTo (Json::ValueType::objectValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'rembParams' parameter should be a object");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (rembParams);
      std::dynamic_pointer_cast<BaseRtpEndpoint> (obj)->setRembParams (rembParams);
    }
    return;
  }

  SdpEndpointImpl::invoke (obj, methodName, params, response);
}

bool
BaseRtpEndpointImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("MediaStateChanged" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalMediaStateChanged.connect ([ &, wh] (MediaStateChanged event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<MediaStateChanged> ev_ref (new MediaStateChanged(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "MediaStateChanged";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("ConnectionStateChanged" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalConnectionStateChanged.connect ([ &, wh] (ConnectionStateChanged event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<ConnectionStateChanged> ev_ref (new ConnectionStateChanged(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "ConnectionStateChanged";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return SdpEndpointImpl::connect (eventType, handler);
}

void
BaseRtpEndpointImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'BaseRtpEndpointImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::BaseRtpEndpointImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::BaseRtpEndpointImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::BaseRtpEndpointImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::BaseRtpEndpoint> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::BaseRtpEndpointImpl> aux = std::dynamic_pointer_cast<kurento::BaseRtpEndpointImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::BaseRtpEndpoint> (aux);
}

} /* kurento */