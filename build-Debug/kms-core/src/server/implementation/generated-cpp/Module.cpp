/* Autogenerated with kurento-module-creator */

#include "FactoryRegistrar.hpp"

#include <MediaObjectImplFactory.hpp>
#include <MediaObject.hpp>
#include <ServerManagerImplFactory.hpp>
#include <ServerManager.hpp>
#include <SessionEndpointImplFactory.hpp>
#include <SessionEndpoint.hpp>
#include <HubImplFactory.hpp>
#include <Hub.hpp>
#include <FilterImplFactory.hpp>
#include <Filter.hpp>
#include <EndpointImplFactory.hpp>
#include <Endpoint.hpp>
#include <HubPortImplFactory.hpp>
#include <HubPort.hpp>
#include <PassThroughImplFactory.hpp>
#include <PassThrough.hpp>
#include <UriEndpointImplFactory.hpp>
#include <UriEndpoint.hpp>
#include <MediaPipelineImplFactory.hpp>
#include <MediaPipeline.hpp>
#include <SdpEndpointImplFactory.hpp>
#include <SdpEndpoint.hpp>
#include <BaseRtpEndpointImplFactory.hpp>
#include <BaseRtpEndpoint.hpp>
#include <MediaElementImplFactory.hpp>
#include <MediaElement.hpp>
#include <UriEndpointState.hpp>
#include <ServerInfo.hpp>
#include <ServerType.hpp>
#include <GstreamerDotDetails.hpp>
#include <ModuleInfo.hpp>
#include <MediaState.hpp>
#include <MediaFlowState.hpp>
#include <MediaTranscodingState.hpp>
#include <ConnectionState.hpp>
#include <MediaType.hpp>
#include <FilterType.hpp>
#include <VideoCodec.hpp>
#include <AudioCodec.hpp>
#include <Fraction.hpp>
#include <AudioCaps.hpp>
#include <VideoCaps.hpp>
#include <ElementConnectionData.hpp>
#include <Tag.hpp>
#include <StatsType.hpp>
#include <MediaLatencyStat.hpp>
#include <Stats.hpp>
#include <ElementStats.hpp>
#include <EndpointStats.hpp>
#include <RTCStats.hpp>
#include <RTCRTPStreamStats.hpp>
#include <RTCCodec.hpp>
#include <RTCInboundRTPStreamStats.hpp>
#include <RTCOutboundRTPStreamStats.hpp>
#include <RTCPeerConnectionStats.hpp>
#include <RTCMediaStreamStats.hpp>
#include <RTCMediaStreamTrackStats.hpp>
#include <RTCDataChannelState.hpp>
#include <RTCDataChannelStats.hpp>
#include <RTCTransportStats.hpp>
#include <RTCStatsIceCandidateType.hpp>
#include <RTCIceCandidateAttributes.hpp>
#include <RTCStatsIceCandidatePairState.hpp>
#include <RTCIceCandidatePairStats.hpp>
#include <RTCCertificateStats.hpp>
#include <CodecConfiguration.hpp>
#include <RembParams.hpp>

extern "C" {

  const kurento::FactoryRegistrar *getFactoryRegistrar ();

}

const kurento::FactoryRegistrar *
getFactoryRegistrar ()
{
  static bool loaded = false;
  static std::map<std::string, std::shared_ptr<kurento::Factory>> factories;

  if (!loaded) {
    factories["HubPort"] = std::shared_ptr <kurento::Factory> (new kurento::HubPortImplFactory() );
    factories["PassThrough"] = std::shared_ptr <kurento::Factory> (new kurento::PassThroughImplFactory() );
    factories["MediaPipeline"] = std::shared_ptr <kurento::Factory> (new kurento::MediaPipelineImplFactory() );

    kurento::ServerInfo::registerType ();
    kurento::ModuleInfo::registerType ();
    kurento::Fraction::registerType ();
    kurento::AudioCaps::registerType ();
    kurento::VideoCaps::registerType ();
    kurento::ElementConnectionData::registerType ();
    kurento::Tag::registerType ();
    kurento::MediaLatencyStat::registerType ();
    kurento::Stats::registerType ();
    kurento::ElementStats::registerType ();
    kurento::EndpointStats::registerType ();
    kurento::RTCStats::registerType ();
    kurento::RTCRTPStreamStats::registerType ();
    kurento::RTCCodec::registerType ();
    kurento::RTCInboundRTPStreamStats::registerType ();
    kurento::RTCOutboundRTPStreamStats::registerType ();
    kurento::RTCPeerConnectionStats::registerType ();
    kurento::RTCMediaStreamStats::registerType ();
    kurento::RTCMediaStreamTrackStats::registerType ();
    kurento::RTCDataChannelStats::registerType ();
    kurento::RTCTransportStats::registerType ();
    kurento::RTCIceCandidateAttributes::registerType ();
    kurento::RTCIceCandidatePairStats::registerType ();
    kurento::RTCCertificateStats::registerType ();
    kurento::CodecConfiguration::registerType ();
    kurento::RembParams::registerType ();
    loaded = true;
  }

  static kurento::FactoryRegistrar factory (factories);
  return &factory;
}
