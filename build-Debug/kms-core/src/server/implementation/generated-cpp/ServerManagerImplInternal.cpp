/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "ServerInfo.hpp"
#include "MediaPipelineImpl.hpp"
#include "ServerManagerImpl.hpp"
#include "ServerManagerImplFactory.hpp"
#include "ServerManagerInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

void
ServerManagerImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "getKmd") {
    kurento::JsonSerializer s (false);
    ServerManagerMethodGetKmd method;
    JsonSerializer responseSerializer (true);
    std::string ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<ServerManager> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getUsedMemory") {
    kurento::JsonSerializer s (false);
    ServerManagerMethodGetUsedMemory method;
    JsonSerializer responseSerializer (true);
    int64_t ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<ServerManager> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getInfo") {
    std::shared_ptr<ServerInfo> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<ServerManager> (obj)->getInfo ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getPipelines") {
    std::vector<std::shared_ptr<MediaPipeline>> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<ServerManager> (obj)->getPipelines ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getSessions") {
    std::vector<std::string> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<ServerManager> (obj)->getSessions ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getMetadata") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<ServerManager> (obj)->getMetadata ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  MediaObjectImpl::invoke (obj, methodName, params, response);
}

bool
ServerManagerImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("ObjectCreated" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalObjectCreated.connect ([ &, wh] (ObjectCreated event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<ObjectCreated> ev_ref (new ObjectCreated(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "ObjectCreated";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  if ("ObjectDestroyed" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalObjectDestroyed.connect ([ &, wh] (ObjectDestroyed event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<ObjectDestroyed> ev_ref (new ObjectDestroyed(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "ObjectDestroyed";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return MediaObjectImpl::connect (eventType, handler);
}

void
ServerManagerImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'ServerManagerImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::ServerManagerImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::ServerManagerImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::ServerManagerImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::ServerManager> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::ServerManagerImpl> aux = std::dynamic_pointer_cast<kurento::ServerManagerImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::ServerManager> (aux);
}

} /* kurento */