/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "Tag.hpp"
#include "MediaPipelineImpl.hpp"
#include "MediaObjectImpl.hpp"
#include "MediaObjectImpl.hpp"
#include "MediaObjectImplFactory.hpp"
#include "MediaObjectInternal.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

using kurento::KurentoException;

namespace kurento
{

void
MediaObjectImpl::invoke (std::shared_ptr<MediaObjectImpl> obj, const std::string &methodName, const Json::Value &params, Json::Value &response)
{
  if (methodName == "addTag") {
    kurento::JsonSerializer s (false);
    MediaObjectMethodAddTag method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaObject> (obj) );
    return;
  }

  if (methodName == "removeTag") {
    kurento::JsonSerializer s (false);
    MediaObjectMethodRemoveTag method;

    s.JsonValue = params;
    method.Serialize (s);

    method.invoke (std::dynamic_pointer_cast<MediaObject> (obj) );
    return;
  }

  if (methodName == "getTag") {
    kurento::JsonSerializer s (false);
    MediaObjectMethodGetTag method;
    JsonSerializer responseSerializer (true);
    std::string ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaObject> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getTags") {
    kurento::JsonSerializer s (false);
    MediaObjectMethodGetTags method;
    JsonSerializer responseSerializer (true);
    std::vector<std::shared_ptr<Tag>> ret;

    s.JsonValue = params;
    method.Serialize (s);

    ret = method.invoke (std::dynamic_pointer_cast<MediaObject> (obj) );
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getMediaPipeline") {
    std::shared_ptr<MediaPipeline> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getMediaPipeline ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getParent") {
    std::shared_ptr<MediaObject> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getParent ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getId") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getId ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getChilds") {
    std::vector<std::shared_ptr<MediaObject>> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getChilds ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getChildren") {
    std::vector<std::shared_ptr<MediaObject>> ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getChildren ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "getName") {
    std::string ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getName ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setName") {
    kurento::JsonSerializer s (false);
    std::string name;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("name") || !s.JsonValue["name"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'name' parameter should be a string");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (name);
      std::dynamic_pointer_cast<MediaObject> (obj)->setName (name);
    }
    return;
  }

  if (methodName == "getSendTagsInEvents") {
    bool ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getSendTagsInEvents ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  if (methodName == "setSendTagsInEvents") {
    kurento::JsonSerializer s (false);
    bool sendTagsInEvents;
    s.JsonValue = params;

    if (!s.JsonValue.isMember ("sendTagsInEvents") || !s.JsonValue["sendTagsInEvents"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'sendTagsInEvents' parameter should be a boolean");
    }

    if (!s.IsWriter) {
      s.SerializeNVP (sendTagsInEvents);
      std::dynamic_pointer_cast<MediaObject> (obj)->setSendTagsInEvents (sendTagsInEvents);
    }
    return;
  }

  if (methodName == "getCreationTime") {
    int ret;
    JsonSerializer responseSerializer (true);

    ret = std::dynamic_pointer_cast<MediaObject> (obj)->getCreationTime ();
    responseSerializer.SerializeNVP (ret);
    response = responseSerializer.JsonValue["ret"];
    return;
  }

  Json::Value data;

  KurentoException ke (MALFORMED_TRANSACTION,
                       "Method '" + methodName + "' with " + std::to_string (params.size() ) + " parameters not found");

  data["type"] = ke.getType();

  throw JsonRpc::CallException (ke.getCode (), ke.getMessage (), data);
}

bool
MediaObjectImpl::connect (const std::string &eventType, std::shared_ptr<EventHandler> handler)
{

  if ("Error" == eventType) {
    std::weak_ptr<EventHandler> wh = handler;

    sigc::connection conn = signalError.connect ([ &, wh] (Error event) {
      std::shared_ptr<EventHandler> lh = wh.lock();
      if (!lh)
        return;

      std::shared_ptr<Error> ev_ref (new Error(event));
      auto object = this->shared_from_this();

      lh->sendEventAsync ([ev_ref, object, lh] {
        JsonSerializer s (true);

        s.Serialize ("data", ev_ref.get());
        s.Serialize ("object", object.get());
        s.JsonValue["type"] = "Error";

        lh->sendEvent (s.JsonValue);
      });
    });
    handler->setConnection (conn);
    return true;
  }

  return false;
}

void
MediaObjectImpl::Serialize (JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    try {
      Json::Value v (getId() );

      serializer.JsonValue = v;
    } catch (std::bad_cast &e) {
    }
  } else {
    throw KurentoException (MARSHALL_ERROR,
                            "'MediaObjectImpl' cannot be deserialized as an object");
  }
}
} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::MediaObjectImpl> &object, JsonSerializer &serializer)
{
  if (serializer.IsWriter) {
    if (object) {
      object->Serialize (serializer);
    }
  } else {
    std::shared_ptr<kurento::MediaObjectImpl> aux;
    aux = kurento::MediaObjectImplFactory::getObject (JsonFixes::getString(serializer.JsonValue) );
    object = std::dynamic_pointer_cast<kurento::MediaObjectImpl> (aux);
  }
}

void
Serialize (std::shared_ptr<kurento::MediaObject> &object, JsonSerializer &serializer)
{
  std::shared_ptr<kurento::MediaObjectImpl> aux = std::dynamic_pointer_cast<kurento::MediaObjectImpl> (object);

  Serialize (aux, serializer);
  object = std::dynamic_pointer_cast <kurento::MediaObject> (aux);
}

} /* kurento */