/* Autogenerated with kurento-module-creator */

#ifndef __CONNECTION_STATE_CHANGED_HPP__
#define __CONNECTION_STATE_CHANGED_HPP__

#include <json/json.h>
#include <memory>
#include "Media.hpp"

namespace kurento
{
class ConnectionStateChanged;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::ConnectionStateChanged> &object, JsonSerializer &s);
}


namespace kurento
{
class ConnectionState;
} /* kurento */

namespace kurento
{
class ConnectionState;
class ConnectionState;

class ConnectionStateChanged : public Media
{

public:

  ConnectionStateChanged (std::shared_ptr<MediaObject> source, const std::string &type, std::shared_ptr<ConnectionState> oldState, std::shared_ptr<ConnectionState> newState) : Media (source, type) {
      this->oldState = oldState;
      this->newState = newState;
  };

  ConnectionStateChanged (const ConnectionStateChanged &copy) : Media (copy) {
      this->oldState = copy.oldState;
      this->newState = copy.newState;
  };

  ConnectionStateChanged (const Json::Value &value);

  virtual void setOldState (std::shared_ptr<ConnectionState> oldState) {
    this->oldState = oldState;
  };

  virtual std::shared_ptr<ConnectionState> getOldState () {
    return oldState;
  };

  virtual void setNewState (std::shared_ptr<ConnectionState> newState) {
    this->newState = newState;
  };

  virtual std::shared_ptr<ConnectionState> getNewState () {
    return newState;
  };

  static std::string getName() {
    return "ConnectionStateChanged";
  }

  void Serialize (JsonSerializer &s) override;

protected:

  ConnectionStateChanged() = default;

private:
  std::shared_ptr<ConnectionState> oldState;
  std::shared_ptr<ConnectionState> newState;

  friend void kurento::Serialize (std::shared_ptr<kurento::ConnectionStateChanged> &event, JsonSerializer &s);
};

} /* kurento */

#endif /*  __CONNECTION_STATE_CHANGED_HPP__ */
