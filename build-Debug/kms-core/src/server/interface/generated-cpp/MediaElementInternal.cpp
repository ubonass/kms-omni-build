/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "MediaElementInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "MediaType.hpp"
#include "ElementConnectionData.hpp"
#include "MediaElement.hpp"
#include "AudioCaps.hpp"
#include "VideoCaps.hpp"
#include "GstreamerDotDetails.hpp"
#include "Stats.hpp"

namespace kurento
{

std::vector<std::shared_ptr<ElementConnectionData>> MediaElementMethodGetSourceConnections::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::getSourceConnections");
  }

  if (__isSetMediaType && __isSetDescription) {
    return obj->getSourceConnections (mediaType, description);
  }

  if (__isSetMediaType) {
    return obj->getSourceConnections (mediaType);
  }

  return obj->getSourceConnections ();
}

void MediaElementMethodGetSourceConnections::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    if (__isSetMediaType) {
      s.SerializeNVP (mediaType);
    }

    if (__isSetDescription) {
      s.SerializeNVP (description);
    }

  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (s.JsonValue.isMember ("mediaType") ) {
      if (s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaType = true;
        s.SerializeNVP (mediaType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaType' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("description") ) {
      if (s.JsonValue["description"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetDescription = true;
        s.SerializeNVP (description);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'description' parameter should be a string");
      }
    }

  }
}

std::vector<std::shared_ptr<ElementConnectionData>> MediaElementMethodGetSinkConnections::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::getSinkConnections");
  }

  if (__isSetMediaType && __isSetDescription) {
    return obj->getSinkConnections (mediaType, description);
  }

  if (__isSetMediaType) {
    return obj->getSinkConnections (mediaType);
  }

  return obj->getSinkConnections ();
}

void MediaElementMethodGetSinkConnections::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    if (__isSetMediaType) {
      s.SerializeNVP (mediaType);
    }

    if (__isSetDescription) {
      s.SerializeNVP (description);
    }

  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (s.JsonValue.isMember ("mediaType") ) {
      if (s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaType = true;
        s.SerializeNVP (mediaType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaType' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("description") ) {
      if (s.JsonValue["description"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetDescription = true;
        s.SerializeNVP (description);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'description' parameter should be a string");
      }
    }

  }
}

void MediaElementMethodConnect::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::connect");
  }

  if (__isSetMediaType && __isSetSourceMediaDescription && __isSetSinkMediaDescription) {
    return obj->connect (sink, mediaType, sourceMediaDescription, sinkMediaDescription);
  }

  if (__isSetMediaType && __isSetSourceMediaDescription) {
    return obj->connect (sink, mediaType, sourceMediaDescription);
  }

  if (__isSetMediaType) {
    return obj->connect (sink, mediaType);
  }

  return obj->connect (sink);
}

void MediaElementMethodConnect::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (sink);

    if (__isSetMediaType) {
      s.SerializeNVP (mediaType);
    }

    if (__isSetSourceMediaDescription) {
      s.SerializeNVP (sourceMediaDescription);
    }

    if (__isSetSinkMediaDescription) {
      s.SerializeNVP (sinkMediaDescription);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("sink") || !s.JsonValue["sink"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'sink' parameter should be a string");
    }

    s.SerializeNVP (sink);

    if (s.JsonValue.isMember ("mediaType") ) {
      if (s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaType = true;
        s.SerializeNVP (mediaType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaType' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("sourceMediaDescription") ) {
      if (s.JsonValue["sourceMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSourceMediaDescription = true;
        s.SerializeNVP (sourceMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sourceMediaDescription' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("sinkMediaDescription") ) {
      if (s.JsonValue["sinkMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSinkMediaDescription = true;
        s.SerializeNVP (sinkMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sinkMediaDescription' parameter should be a string");
      }
    }

  }
}

void MediaElementMethodDisconnect::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::disconnect");
  }

  if (__isSetMediaType && __isSetSourceMediaDescription && __isSetSinkMediaDescription) {
    return obj->disconnect (sink, mediaType, sourceMediaDescription, sinkMediaDescription);
  }

  if (__isSetMediaType && __isSetSourceMediaDescription) {
    return obj->disconnect (sink, mediaType, sourceMediaDescription);
  }

  if (__isSetMediaType) {
    return obj->disconnect (sink, mediaType);
  }

  return obj->disconnect (sink);
}

void MediaElementMethodDisconnect::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (sink);

    if (__isSetMediaType) {
      s.SerializeNVP (mediaType);
    }

    if (__isSetSourceMediaDescription) {
      s.SerializeNVP (sourceMediaDescription);
    }

    if (__isSetSinkMediaDescription) {
      s.SerializeNVP (sinkMediaDescription);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("sink") || !s.JsonValue["sink"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'sink' parameter should be a string");
    }

    s.SerializeNVP (sink);

    if (s.JsonValue.isMember ("mediaType") ) {
      if (s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaType = true;
        s.SerializeNVP (mediaType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaType' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("sourceMediaDescription") ) {
      if (s.JsonValue["sourceMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSourceMediaDescription = true;
        s.SerializeNVP (sourceMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sourceMediaDescription' parameter should be a string");
      }
    }

    if (s.JsonValue.isMember ("sinkMediaDescription") ) {
      if (s.JsonValue["sinkMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSinkMediaDescription = true;
        s.SerializeNVP (sinkMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sinkMediaDescription' parameter should be a string");
      }
    }

  }
}

void MediaElementMethodSetAudioFormat::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::setAudioFormat");
  }

  return obj->setAudioFormat (caps);
}

void MediaElementMethodSetAudioFormat::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (caps);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("caps") || !s.JsonValue["caps"].isConvertibleTo (Json::ValueType::objectValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'caps' parameter should be a object");
    }

    s.SerializeNVP (caps);

  }
}

void MediaElementMethodSetVideoFormat::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::setVideoFormat");
  }

  return obj->setVideoFormat (caps);
}

void MediaElementMethodSetVideoFormat::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (caps);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("caps") || !s.JsonValue["caps"].isConvertibleTo (Json::ValueType::objectValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'caps' parameter should be a object");
    }

    s.SerializeNVP (caps);

  }
}

std::string MediaElementMethodGetGstreamerDot::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::getGstreamerDot");
  }

  if (__isSetDetails) {
    return obj->getGstreamerDot (details);
  }

  return obj->getGstreamerDot ();
}

void MediaElementMethodGetGstreamerDot::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    if (__isSetDetails) {
      s.SerializeNVP (details);
    }

  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (s.JsonValue.isMember ("details") ) {
      if (s.JsonValue["details"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetDetails = true;
        s.SerializeNVP (details);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'details' parameter should be a string");
      }
    }

  }
}

void MediaElementMethodSetOutputBitrate::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::setOutputBitrate");
  }

  return obj->setOutputBitrate (bitrate);
}

void MediaElementMethodSetOutputBitrate::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (bitrate);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("bitrate") || !s.JsonValue["bitrate"].isConvertibleTo (Json::ValueType::intValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'bitrate' parameter should be a integer");
    }

    s.SerializeNVP (bitrate);

  }
}

std::map <std::string,std::shared_ptr<Stats>> MediaElementMethodGetStats::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::getStats");
  }

  if (__isSetMediaType) {
    return obj->getStats (mediaType);
  }

  return obj->getStats ();
}

void MediaElementMethodGetStats::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    if (__isSetMediaType) {
      s.SerializeNVP (mediaType);
    }

  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (s.JsonValue.isMember ("mediaType") ) {
      if (s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetMediaType = true;
        s.SerializeNVP (mediaType);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'mediaType' parameter should be a string");
      }
    }

  }
}

bool MediaElementMethodIsMediaFlowingIn::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::isMediaFlowingIn");
  }

  if (__isSetSinkMediaDescription) {
    return obj->isMediaFlowingIn (mediaType, sinkMediaDescription);
  }

  return obj->isMediaFlowingIn (mediaType);
}

void MediaElementMethodIsMediaFlowingIn::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaType);

    if (__isSetSinkMediaDescription) {
      s.SerializeNVP (sinkMediaDescription);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaType") || !s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaType' parameter should be a string");
    }

    s.SerializeNVP (mediaType);

    if (s.JsonValue.isMember ("sinkMediaDescription") ) {
      if (s.JsonValue["sinkMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSinkMediaDescription = true;
        s.SerializeNVP (sinkMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sinkMediaDescription' parameter should be a string");
      }
    }

  }
}

bool MediaElementMethodIsMediaFlowingOut::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::isMediaFlowingOut");
  }

  if (__isSetSourceMediaDescription) {
    return obj->isMediaFlowingOut (mediaType, sourceMediaDescription);
  }

  return obj->isMediaFlowingOut (mediaType);
}

void MediaElementMethodIsMediaFlowingOut::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaType);

    if (__isSetSourceMediaDescription) {
      s.SerializeNVP (sourceMediaDescription);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaType") || !s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaType' parameter should be a string");
    }

    s.SerializeNVP (mediaType);

    if (s.JsonValue.isMember ("sourceMediaDescription") ) {
      if (s.JsonValue["sourceMediaDescription"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetSourceMediaDescription = true;
        s.SerializeNVP (sourceMediaDescription);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'sourceMediaDescription' parameter should be a string");
      }
    }

  }
}

bool MediaElementMethodIsMediaTranscoding::invoke (std::shared_ptr<MediaElement> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method MediaElement::isMediaTranscoding");
  }

  if (__isSetBinName) {
    return obj->isMediaTranscoding (mediaType, binName);
  }

  return obj->isMediaTranscoding (mediaType);
}

void MediaElementMethodIsMediaTranscoding::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (mediaType);

    if (__isSetBinName) {
      s.SerializeNVP (binName);
    }

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("mediaType") || !s.JsonValue["mediaType"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaType' parameter should be a string");
    }

    s.SerializeNVP (mediaType);

    if (s.JsonValue.isMember ("binName") ) {
      if (s.JsonValue["binName"].isConvertibleTo (Json::ValueType::stringValue) ) {
        __isSetBinName = true;
        s.SerializeNVP (binName);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'binName' parameter should be a string");
      }
    }

  }
}

} /* kurento */
