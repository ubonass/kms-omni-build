/* Autogenerated with kurento-module-creator */

#ifndef __STATS_TYPE_HPP__
#define __STATS_TYPE_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>


namespace kurento
{
class StatsType;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::StatsType> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class StatsType
{

public:

  typedef enum {
    inboundrtp,
    outboundrtp,
    session,
    datachannel,
    track,
    transport,
    candidatepair,
    localcandidate,
    remotecandidate,
    element,
    endpoint
  } type;

  StatsType (const std::string &value) {
    enumValue = getValueFromString (value);
  };

  StatsType (type value) {
    this->enumValue = value;
  }

  type getValue () {
    return enumValue;
  };

  std::string getString () {

    if (enumValue ==  inboundrtp) {
      return "inboundrtp";
    }

    if (enumValue ==  outboundrtp) {
      return "outboundrtp";
    }

    if (enumValue ==  session) {
      return "session";
    }

    if (enumValue ==  datachannel) {
      return "datachannel";
    }

    if (enumValue ==  track) {
      return "track";
    }

    if (enumValue ==  transport) {
      return "transport";
    }

    if (enumValue ==  candidatepair) {
      return "candidatepair";
    }

    if (enumValue ==  localcandidate) {
      return "localcandidate";
    }

    if (enumValue ==  remotecandidate) {
      return "remotecandidate";
    }

    if (enumValue ==  element) {
      return "element";
    }

    if (enumValue ==  endpoint) {
      return "endpoint";
    }

    return "";
  }

  void Serialize (JsonSerializer &s);

  StatsType() = default;

private:

  static type getValueFromString (const std::string &value);

  type enumValue;

  friend void kurento::Serialize (std::shared_ptr<kurento::StatsType> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __STATS_TYPE_HPP__ */
