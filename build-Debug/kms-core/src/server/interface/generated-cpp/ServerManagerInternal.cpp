/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "ServerManagerInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>
#include "ServerInfo.hpp"
#include "MediaPipeline.hpp"

namespace kurento
{

std::string ServerManagerMethodGetKmd::invoke (std::shared_ptr<ServerManager> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method ServerManager::getKmd");
  }

  return obj->getKmd (moduleName);
}

void ServerManagerMethodGetKmd::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (moduleName);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("moduleName") || !s.JsonValue["moduleName"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'moduleName' parameter should be a string");
    }

    s.SerializeNVP (moduleName);

  }
}

int64_t ServerManagerMethodGetUsedMemory::invoke (std::shared_ptr<ServerManager> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method ServerManager::getUsedMemory");
  }

  return obj->getUsedMemory ();
}

void ServerManagerMethodGetUsedMemory::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

} /* kurento */
