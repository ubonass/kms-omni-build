/* Autogenerated with kurento-module-creator */

#include "RTCStatsIceCandidatePairState.hpp"
#include "RTCIceCandidatePairStats.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

namespace kurento
{

void RTCIceCandidatePairStats::Serialize (JsonSerializer &s)
{
  RTCStats::Serialize (s);


  if (s.IsWriter) {
    s.JsonValue["__type__"] = "RTCIceCandidatePairStats";
    s.JsonValue["__module__"] = "kurento";

    s.SerializeNVP (transportId);

    s.SerializeNVP (localCandidateId);

    s.SerializeNVP (remoteCandidateId);

    s.SerializeNVP (state);

    s.SerializeNVP (priority);

    s.SerializeNVP (nominated);

    s.SerializeNVP (writable);

    s.SerializeNVP (readable);

    s.SerializeNVP (bytesSent);

    s.SerializeNVP (bytesReceived);

    s.SerializeNVP (roundTripTime);

    s.SerializeNVP (availableOutgoingBitrate);

    s.SerializeNVP (availableIncomingBitrate);

  } else {
    if (!s.JsonValue.isMember ("transportId") || !s.JsonValue["transportId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'transportId' property should be a string");
    }

    s.SerializeNVP (transportId);

    if (!s.JsonValue.isMember ("localCandidateId") || !s.JsonValue["localCandidateId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'localCandidateId' property should be a string");
    }

    s.SerializeNVP (localCandidateId);

    if (!s.JsonValue.isMember ("remoteCandidateId") || !s.JsonValue["remoteCandidateId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'remoteCandidateId' property should be a string");
    }

    s.SerializeNVP (remoteCandidateId);

    if (!s.JsonValue.isMember ("state") || !s.JsonValue["state"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'state' property should be a string");
    }

    s.SerializeNVP (state);

    if (!s.JsonValue.isMember ("priority") || !s.JsonValue["priority"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'priority' property should be a int64");
    }

    s.SerializeNVP (priority);

    if (!s.JsonValue.isMember ("nominated") || !s.JsonValue["nominated"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'nominated' property should be a boolean");
    }

    s.SerializeNVP (nominated);

    if (!s.JsonValue.isMember ("writable") || !s.JsonValue["writable"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'writable' property should be a boolean");
    }

    s.SerializeNVP (writable);

    if (!s.JsonValue.isMember ("readable") || !s.JsonValue["readable"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'readable' property should be a boolean");
    }

    s.SerializeNVP (readable);

    if (!s.JsonValue.isMember ("bytesSent") || !s.JsonValue["bytesSent"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'bytesSent' property should be a int64");
    }

    s.SerializeNVP (bytesSent);

    if (!s.JsonValue.isMember ("bytesReceived") || !s.JsonValue["bytesReceived"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'bytesReceived' property should be a int64");
    }

    s.SerializeNVP (bytesReceived);

    if (!s.JsonValue.isMember ("roundTripTime") || !s.JsonValue["roundTripTime"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'roundTripTime' property should be a double");
    }

    s.SerializeNVP (roundTripTime);

    if (!s.JsonValue.isMember ("availableOutgoingBitrate") || !s.JsonValue["availableOutgoingBitrate"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'availableOutgoingBitrate' property should be a double");
    }

    s.SerializeNVP (availableOutgoingBitrate);

    if (!s.JsonValue.isMember ("availableIncomingBitrate") || !s.JsonValue["availableIncomingBitrate"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'availableIncomingBitrate' property should be a double");
    }

    s.SerializeNVP (availableIncomingBitrate);

  }
}

} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::RTCIceCandidatePairStats> &object, JsonSerializer &s)
{
  if (!s.IsWriter && !object) {
    if (!s.JsonValue.isMember ("__type__") || !s.JsonValue["__type__"].isConvertibleTo (Json::ValueType::stringValue) || !s.JsonValue.isMember ("__module__") || !s.JsonValue["__module__"].isConvertibleTo (Json::ValueType::stringValue)) {
      object.reset (new kurento::RTCIceCandidatePairStats() );
    } else {
      auto ptr = kurento::RegisterParent::createRegister (s.JsonValue["__module__"].asString () + "." + s.JsonValue["__type__"].asString ());

      if (!ptr) {
        throw KurentoException (UNEXPECTED_ERROR,
                                "Type " + s.JsonValue["__type__"].asString () + " does not exist in module " + s.JsonValue["__module__"].asString ());
      }

      object.reset (dynamic_cast <kurento::RTCIceCandidatePairStats*> (ptr));

      if (!object) {
        delete ptr;
        throw KurentoException (UNEXPECTED_ERROR, "Type " + s.JsonValue["__type__"].asString () + " is not compatible");
      }
    }
  }

  if (object) {
    object->Serialize (s);
  }
}

} /* kurento */