/* Autogenerated with kurento-module-creator */

#ifndef __REMB_PARAMS_HPP__
#define __REMB_PARAMS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include <RegisterParent.hpp>


namespace kurento
{
class RembParams;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RembParams> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class RembParams : public RegisterParent 
{

public:

  RembParams () {
  };

  void setPacketsRecvIntervalTop (int packetsRecvIntervalTop) {
    this->packetsRecvIntervalTop = packetsRecvIntervalTop;
    __isSetPacketsRecvIntervalTop = true;
  };

  int getPacketsRecvIntervalTop () {
    return packetsRecvIntervalTop;
  };

  bool isSetPacketsRecvIntervalTop () {
    return __isSetPacketsRecvIntervalTop;
  };

  void setExponentialFactor (float exponentialFactor) {
    this->exponentialFactor = exponentialFactor;
    __isSetExponentialFactor = true;
  };

  float getExponentialFactor () {
    return exponentialFactor;
  };

  bool isSetExponentialFactor () {
    return __isSetExponentialFactor;
  };

  void setLinealFactorMin (int linealFactorMin) {
    this->linealFactorMin = linealFactorMin;
    __isSetLinealFactorMin = true;
  };

  int getLinealFactorMin () {
    return linealFactorMin;
  };

  bool isSetLinealFactorMin () {
    return __isSetLinealFactorMin;
  };

  void setLinealFactorGrade (float linealFactorGrade) {
    this->linealFactorGrade = linealFactorGrade;
    __isSetLinealFactorGrade = true;
  };

  float getLinealFactorGrade () {
    return linealFactorGrade;
  };

  bool isSetLinealFactorGrade () {
    return __isSetLinealFactorGrade;
  };

  void setDecrementFactor (float decrementFactor) {
    this->decrementFactor = decrementFactor;
    __isSetDecrementFactor = true;
  };

  float getDecrementFactor () {
    return decrementFactor;
  };

  bool isSetDecrementFactor () {
    return __isSetDecrementFactor;
  };

  void setThresholdFactor (float thresholdFactor) {
    this->thresholdFactor = thresholdFactor;
    __isSetThresholdFactor = true;
  };

  float getThresholdFactor () {
    return thresholdFactor;
  };

  bool isSetThresholdFactor () {
    return __isSetThresholdFactor;
  };

  void setUpLosses (int upLosses) {
    this->upLosses = upLosses;
    __isSetUpLosses = true;
  };

  int getUpLosses () {
    return upLosses;
  };

  bool isSetUpLosses () {
    return __isSetUpLosses;
  };

  void setRembOnConnect (int rembOnConnect) {
    this->rembOnConnect = rembOnConnect;
    __isSetRembOnConnect = true;
  };

  int getRembOnConnect () {
    return rembOnConnect;
  };

  bool isSetRembOnConnect () {
    return __isSetRembOnConnect;
  };

  virtual void Serialize (JsonSerializer &s);

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RembParams ();

    };

    RegisterParent::registerType ("kurento.RembParams", func);
  }

private:

  int packetsRecvIntervalTop;
  bool __isSetPacketsRecvIntervalTop = false;
  float exponentialFactor;
  bool __isSetExponentialFactor = false;
  int linealFactorMin;
  bool __isSetLinealFactorMin = false;
  float linealFactorGrade;
  bool __isSetLinealFactorGrade = false;
  float decrementFactor;
  bool __isSetDecrementFactor = false;
  float thresholdFactor;
  bool __isSetThresholdFactor = false;
  int upLosses;
  bool __isSetUpLosses = false;
  int rembOnConnect;
  bool __isSetRembOnConnect = false;

  friend void kurento::Serialize (std::shared_ptr<kurento::RembParams> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __REMB_PARAMS_HPP__ */
