/* Autogenerated with kurento-module-creator */

#ifndef __MEDIA_ELEMENT_HPP__
#define __MEDIA_ELEMENT_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include <vector>
#include "MediaObject.hpp"
#include "ElementConnected.hpp"
#include "ElementDisconnected.hpp"
#include "MediaFlowOutStateChange.hpp"
#include "MediaFlowInStateChange.hpp"
#include "MediaTranscodingStateChange.hpp"
#include <sigc++/sigc++.h>

namespace kurento
{
class MediaElement;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::MediaElement> &object, JsonSerializer &serializer);
}

namespace kurento
{
class MediaType;
class ElementConnectionData;
class MediaElement;
class AudioCaps;
class VideoCaps;
class GstreamerDotDetails;
class Stats;
} /* kurento */

namespace kurento
{
class MediaElement : public virtual MediaObject
{

public:
  MediaElement() = default;
  ~MediaElement() override = default;


  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSourceConnections () = 0;
  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSourceConnections (std::shared_ptr<MediaType> mediaType) = 0;
  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSourceConnections (std::shared_ptr<MediaType> mediaType, const std::string &description) = 0;
  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSinkConnections () = 0;
  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSinkConnections (std::shared_ptr<MediaType> mediaType) = 0;
  virtual std::vector<std::shared_ptr<ElementConnectionData>> getSinkConnections (std::shared_ptr<MediaType> mediaType, const std::string &description) = 0;
  virtual void connect (std::shared_ptr<MediaElement> sink) = 0;
  virtual void connect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType) = 0;
  virtual void connect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType, const std::string &sourceMediaDescription) = 0;
  virtual void connect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType, const std::string &sourceMediaDescription, const std::string &sinkMediaDescription) = 0;
  virtual void disconnect (std::shared_ptr<MediaElement> sink) = 0;
  virtual void disconnect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType) = 0;
  virtual void disconnect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType, const std::string &sourceMediaDescription) = 0;
  virtual void disconnect (std::shared_ptr<MediaElement> sink, std::shared_ptr<MediaType> mediaType, const std::string &sourceMediaDescription, const std::string &sinkMediaDescription) = 0;
  virtual void setAudioFormat (std::shared_ptr<AudioCaps> caps) = 0;
  virtual void setVideoFormat (std::shared_ptr<VideoCaps> caps) = 0;
  virtual std::string getGstreamerDot () = 0;
  virtual std::string getGstreamerDot (std::shared_ptr<GstreamerDotDetails> details) = 0;
  virtual void setOutputBitrate (int bitrate) = 0;
  virtual std::map <std::string,std::shared_ptr<Stats>> getStats () = 0;
  virtual std::map <std::string,std::shared_ptr<Stats>> getStats (std::shared_ptr<MediaType> mediaType) = 0;
  virtual bool isMediaFlowingIn (std::shared_ptr<MediaType> mediaType) = 0;
  virtual bool isMediaFlowingIn (std::shared_ptr<MediaType> mediaType, const std::string &sinkMediaDescription) = 0;
  virtual bool isMediaFlowingOut (std::shared_ptr<MediaType> mediaType) = 0;
  virtual bool isMediaFlowingOut (std::shared_ptr<MediaType> mediaType, const std::string &sourceMediaDescription) = 0;
  virtual bool isMediaTranscoding (std::shared_ptr<MediaType> mediaType) = 0;
  virtual bool isMediaTranscoding (std::shared_ptr<MediaType> mediaType, const std::string &binName) = 0;

  const std::string &getType() const override;
  const std::string &getQualifiedType() const override;
  const std::string &getModule() const override;
  const std::vector<std::string> &getHierarchy() const override;

  void Serialize(JsonSerializer &serializer) override = 0;

  virtual int getMinOuputBitrate () = 0;
  virtual void setMinOuputBitrate (int minOuputBitrate) = 0;

  virtual int getMinOutputBitrate () = 0;
  virtual void setMinOutputBitrate (int minOutputBitrate) = 0;

  virtual int getMaxOuputBitrate () = 0;
  virtual void setMaxOuputBitrate (int maxOuputBitrate) = 0;

  virtual int getMaxOutputBitrate () = 0;
  virtual void setMaxOutputBitrate (int maxOutputBitrate) = 0;

};

} /* kurento */

#endif /*  __MEDIA_ELEMENT_HPP__ */
