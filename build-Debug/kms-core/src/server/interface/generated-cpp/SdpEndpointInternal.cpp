/* Autogenerated with kurento-module-creator */

#include <iostream>
#include "SdpEndpointInternal.hpp"
#include <KurentoException.hpp>
#include <jsonrpc/JsonSerializer.hpp>

namespace kurento
{

std::string SdpEndpointMethodGenerateOffer::invoke (std::shared_ptr<SdpEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method SdpEndpoint::generateOffer");
  }

  return obj->generateOffer ();
}

void SdpEndpointMethodGenerateOffer::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

std::string SdpEndpointMethodProcessOffer::invoke (std::shared_ptr<SdpEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method SdpEndpoint::processOffer");
  }

  return obj->processOffer (offer);
}

void SdpEndpointMethodProcessOffer::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (offer);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("offer") || !s.JsonValue["offer"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'offer' parameter should be a string");
    }

    s.SerializeNVP (offer);

  }
}

std::string SdpEndpointMethodProcessAnswer::invoke (std::shared_ptr<SdpEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method SdpEndpoint::processAnswer");
  }

  return obj->processAnswer (answer);
}

void SdpEndpointMethodProcessAnswer::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
    s.SerializeNVP (answer);

  } else {
    if (s.JsonValue.isNull ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' is required");
    } else if (!s.JsonValue.isObject ()){
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

    if (!s.JsonValue.isMember ("answer") || !s.JsonValue["answer"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'answer' parameter should be a string");
    }

    s.SerializeNVP (answer);

  }
}

std::string SdpEndpointMethodGetLocalSessionDescriptor::invoke (std::shared_ptr<SdpEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method SdpEndpoint::getLocalSessionDescriptor");
  }

  return obj->getLocalSessionDescriptor ();
}

void SdpEndpointMethodGetLocalSessionDescriptor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

std::string SdpEndpointMethodGetRemoteSessionDescriptor::invoke (std::shared_ptr<SdpEndpoint> obj)
{
  if (!obj) {
    throw KurentoException (MEDIA_OBJECT_NOT_FOUND, "Invalid object while invoking method SdpEndpoint::getRemoteSessionDescriptor");
  }

  return obj->getRemoteSessionDescriptor ();
}

void SdpEndpointMethodGetRemoteSessionDescriptor::Serialize (kurento::JsonSerializer &s)
{
  if (s.IsWriter) {
  } else {
    if (!s.JsonValue.isNull () && !s.JsonValue.isObject ()) {
      throw KurentoException (MARSHALL_ERROR,
                              "'operationParams' should be an object");
    }

  }
}

} /* kurento */
