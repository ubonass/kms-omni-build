/* Autogenerated with kurento-module-creator */

#include "RTCMediaStreamTrackStats.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

namespace kurento
{

void RTCMediaStreamTrackStats::Serialize (JsonSerializer &s)
{
  RTCStats::Serialize (s);


  if (s.IsWriter) {
    s.JsonValue["__type__"] = "RTCMediaStreamTrackStats";
    s.JsonValue["__module__"] = "kurento";

    s.SerializeNVP (trackIdentifier);

    s.SerializeNVP (remoteSource);

    s.SerializeNVP (ssrcIds);

    s.SerializeNVP (frameWidth);

    s.SerializeNVP (frameHeight);

    s.SerializeNVP (framesPerSecond);

    s.SerializeNVP (framesSent);

    s.SerializeNVP (framesReceived);

    s.SerializeNVP (framesDecoded);

    s.SerializeNVP (framesDropped);

    s.SerializeNVP (framesCorrupted);

    s.SerializeNVP (audioLevel);

    s.SerializeNVP (echoReturnLoss);

    s.SerializeNVP (echoReturnLossEnhancement);

  } else {
    if (!s.JsonValue.isMember ("trackIdentifier") || !s.JsonValue["trackIdentifier"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'trackIdentifier' property should be a string");
    }

    s.SerializeNVP (trackIdentifier);

    if (!s.JsonValue.isMember ("remoteSource") || !s.JsonValue["remoteSource"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'remoteSource' property should be a boolean");
    }

    s.SerializeNVP (remoteSource);

    if (!s.JsonValue.isMember ("ssrcIds") || !s.JsonValue["ssrcIds"].isConvertibleTo (Json::ValueType::arrayValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'ssrcIds' property should be a list");
    }

    s.SerializeNVP (ssrcIds);

    if (!s.JsonValue.isMember ("frameWidth") || !s.JsonValue["frameWidth"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'frameWidth' property should be a int64");
    }

    s.SerializeNVP (frameWidth);

    if (!s.JsonValue.isMember ("frameHeight") || !s.JsonValue["frameHeight"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'frameHeight' property should be a int64");
    }

    s.SerializeNVP (frameHeight);

    if (!s.JsonValue.isMember ("framesPerSecond") || !s.JsonValue["framesPerSecond"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesPerSecond' property should be a double");
    }

    s.SerializeNVP (framesPerSecond);

    if (!s.JsonValue.isMember ("framesSent") || !s.JsonValue["framesSent"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesSent' property should be a int64");
    }

    s.SerializeNVP (framesSent);

    if (!s.JsonValue.isMember ("framesReceived") || !s.JsonValue["framesReceived"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesReceived' property should be a int64");
    }

    s.SerializeNVP (framesReceived);

    if (!s.JsonValue.isMember ("framesDecoded") || !s.JsonValue["framesDecoded"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesDecoded' property should be a int64");
    }

    s.SerializeNVP (framesDecoded);

    if (!s.JsonValue.isMember ("framesDropped") || !s.JsonValue["framesDropped"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesDropped' property should be a int64");
    }

    s.SerializeNVP (framesDropped);

    if (!s.JsonValue.isMember ("framesCorrupted") || !s.JsonValue["framesCorrupted"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'framesCorrupted' property should be a int64");
    }

    s.SerializeNVP (framesCorrupted);

    if (!s.JsonValue.isMember ("audioLevel") || !s.JsonValue["audioLevel"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'audioLevel' property should be a double");
    }

    s.SerializeNVP (audioLevel);

    if (!s.JsonValue.isMember ("echoReturnLoss") || !s.JsonValue["echoReturnLoss"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'echoReturnLoss' property should be a double");
    }

    s.SerializeNVP (echoReturnLoss);

    if (!s.JsonValue.isMember ("echoReturnLossEnhancement") || !s.JsonValue["echoReturnLossEnhancement"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'echoReturnLossEnhancement' property should be a double");
    }

    s.SerializeNVP (echoReturnLossEnhancement);

  }
}

} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::RTCMediaStreamTrackStats> &object, JsonSerializer &s)
{
  if (!s.IsWriter && !object) {
    if (!s.JsonValue.isMember ("__type__") || !s.JsonValue["__type__"].isConvertibleTo (Json::ValueType::stringValue) || !s.JsonValue.isMember ("__module__") || !s.JsonValue["__module__"].isConvertibleTo (Json::ValueType::stringValue)) {
      object.reset (new kurento::RTCMediaStreamTrackStats() );
    } else {
      auto ptr = kurento::RegisterParent::createRegister (s.JsonValue["__module__"].asString () + "." + s.JsonValue["__type__"].asString ());

      if (!ptr) {
        throw KurentoException (UNEXPECTED_ERROR,
                                "Type " + s.JsonValue["__type__"].asString () + " does not exist in module " + s.JsonValue["__module__"].asString ());
      }

      object.reset (dynamic_cast <kurento::RTCMediaStreamTrackStats*> (ptr));

      if (!object) {
        delete ptr;
        throw KurentoException (UNEXPECTED_ERROR, "Type " + s.JsonValue["__type__"].asString () + " is not compatible");
      }
    }
  }

  if (object) {
    object->Serialize (s);
  }
}

} /* kurento */