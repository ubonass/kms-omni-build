/* Autogenerated with kurento-module-creator */

#ifndef __ENDPOINT_STATS_HPP__
#define __ENDPOINT_STATS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "ElementStats.hpp"


namespace kurento
{
class MediaLatencyStat;
} /* kurento */

namespace kurento
{
class EndpointStats;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::EndpointStats> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{
class MediaLatencyStat;

class EndpointStats : public ElementStats
{

public:

  EndpointStats (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, double inputAudioLatency, double inputVideoLatency, const std::vector<std::shared_ptr<MediaLatencyStat>> &inputLatency, double audioE2ELatency, double videoE2ELatency, const std::vector<std::shared_ptr<MediaLatencyStat>> &E2ELatency) : ElementStats (id, type, timestamp, timestampMillis, inputAudioLatency, inputVideoLatency, inputLatency) {
    this->audioE2ELatency = audioE2ELatency;
    this->videoE2ELatency = videoE2ELatency;
    this->E2ELatency = E2ELatency;
  };

  void setAudioE2ELatency (double audioE2ELatency) {
    this->audioE2ELatency = audioE2ELatency;
  };

  double getAudioE2ELatency () {
    return audioE2ELatency;
  };

  void setVideoE2ELatency (double videoE2ELatency) {
    this->videoE2ELatency = videoE2ELatency;
  };

  double getVideoE2ELatency () {
    return videoE2ELatency;
  };

  void setE2ELatency (const std::vector<std::shared_ptr<MediaLatencyStat>> &E2ELatency) {
    this->E2ELatency = E2ELatency;
  };

  std::vector<std::shared_ptr<MediaLatencyStat>> getE2ELatency () {
    return E2ELatency;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new EndpointStats ();

    };

    RegisterParent::registerType ("kurento.EndpointStats", func);
  }

protected:

  EndpointStats() = default;

private:

  double audioE2ELatency;
  double videoE2ELatency;
  std::vector<std::shared_ptr<MediaLatencyStat>> E2ELatency;

  friend void kurento::Serialize (std::shared_ptr<kurento::EndpointStats> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __ENDPOINT_STATS_HPP__ */
