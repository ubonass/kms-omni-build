/* Autogenerated with kurento-module-creator */

#ifndef __RTCTRANSPORT_STATS_HPP__
#define __RTCTRANSPORT_STATS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "RTCStats.hpp"


namespace kurento
{
class RTCTransportStats;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCTransportStats> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class RTCTransportStats : public RTCStats
{

public:

  RTCTransportStats (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, int64_t bytesSent, int64_t bytesReceived, const std::string &rtcpTransportStatsId, bool activeConnection, const std::string &selectedCandidatePairId, const std::string &localCertificateId, const std::string &remoteCertificateId) : RTCStats (id, type, timestamp, timestampMillis) {
    this->bytesSent = bytesSent;
    this->bytesReceived = bytesReceived;
    this->rtcpTransportStatsId = rtcpTransportStatsId;
    this->activeConnection = activeConnection;
    this->selectedCandidatePairId = selectedCandidatePairId;
    this->localCertificateId = localCertificateId;
    this->remoteCertificateId = remoteCertificateId;
  };

  void setBytesSent (int64_t bytesSent) {
    this->bytesSent = bytesSent;
  };

  int64_t getBytesSent () {
    return bytesSent;
  };

  void setBytesReceived (int64_t bytesReceived) {
    this->bytesReceived = bytesReceived;
  };

  int64_t getBytesReceived () {
    return bytesReceived;
  };

  void setRtcpTransportStatsId (const std::string &rtcpTransportStatsId) {
    this->rtcpTransportStatsId = rtcpTransportStatsId;
  };

  std::string getRtcpTransportStatsId () {
    return rtcpTransportStatsId;
  };

  void setActiveConnection (bool activeConnection) {
    this->activeConnection = activeConnection;
  };

  bool getActiveConnection () {
    return activeConnection;
  };

  void setSelectedCandidatePairId (const std::string &selectedCandidatePairId) {
    this->selectedCandidatePairId = selectedCandidatePairId;
  };

  std::string getSelectedCandidatePairId () {
    return selectedCandidatePairId;
  };

  void setLocalCertificateId (const std::string &localCertificateId) {
    this->localCertificateId = localCertificateId;
  };

  std::string getLocalCertificateId () {
    return localCertificateId;
  };

  void setRemoteCertificateId (const std::string &remoteCertificateId) {
    this->remoteCertificateId = remoteCertificateId;
  };

  std::string getRemoteCertificateId () {
    return remoteCertificateId;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RTCTransportStats ();

    };

    RegisterParent::registerType ("kurento.RTCTransportStats", func);
  }

protected:

  RTCTransportStats() = default;

private:

  int64_t bytesSent;
  int64_t bytesReceived;
  std::string rtcpTransportStatsId;
  bool activeConnection;
  std::string selectedCandidatePairId;
  std::string localCertificateId;
  std::string remoteCertificateId;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCTransportStats> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCTRANSPORT_STATS_HPP__ */
