/* Autogenerated with kurento-module-creator */

#ifndef __RTCMEDIA_STREAM_TRACK_STATS_HPP__
#define __RTCMEDIA_STREAM_TRACK_STATS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "RTCStats.hpp"


namespace kurento
{
class RTCMediaStreamTrackStats;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCMediaStreamTrackStats> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class RTCMediaStreamTrackStats : public RTCStats
{

public:

  RTCMediaStreamTrackStats (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, const std::string &trackIdentifier, bool remoteSource, const std::vector<std::string> &ssrcIds, int64_t frameWidth, int64_t frameHeight, double framesPerSecond, int64_t framesSent, int64_t framesReceived, int64_t framesDecoded, int64_t framesDropped, int64_t framesCorrupted, double audioLevel, double echoReturnLoss, double echoReturnLossEnhancement) : RTCStats (id, type, timestamp, timestampMillis) {
    this->trackIdentifier = trackIdentifier;
    this->remoteSource = remoteSource;
    this->ssrcIds = ssrcIds;
    this->frameWidth = frameWidth;
    this->frameHeight = frameHeight;
    this->framesPerSecond = framesPerSecond;
    this->framesSent = framesSent;
    this->framesReceived = framesReceived;
    this->framesDecoded = framesDecoded;
    this->framesDropped = framesDropped;
    this->framesCorrupted = framesCorrupted;
    this->audioLevel = audioLevel;
    this->echoReturnLoss = echoReturnLoss;
    this->echoReturnLossEnhancement = echoReturnLossEnhancement;
  };

  void setTrackIdentifier (const std::string &trackIdentifier) {
    this->trackIdentifier = trackIdentifier;
  };

  std::string getTrackIdentifier () {
    return trackIdentifier;
  };

  void setRemoteSource (bool remoteSource) {
    this->remoteSource = remoteSource;
  };

  bool getRemoteSource () {
    return remoteSource;
  };

  void setSsrcIds (const std::vector<std::string> &ssrcIds) {
    this->ssrcIds = ssrcIds;
  };

  std::vector<std::string> getSsrcIds () {
    return ssrcIds;
  };

  void setFrameWidth (int64_t frameWidth) {
    this->frameWidth = frameWidth;
  };

  int64_t getFrameWidth () {
    return frameWidth;
  };

  void setFrameHeight (int64_t frameHeight) {
    this->frameHeight = frameHeight;
  };

  int64_t getFrameHeight () {
    return frameHeight;
  };

  void setFramesPerSecond (double framesPerSecond) {
    this->framesPerSecond = framesPerSecond;
  };

  double getFramesPerSecond () {
    return framesPerSecond;
  };

  void setFramesSent (int64_t framesSent) {
    this->framesSent = framesSent;
  };

  int64_t getFramesSent () {
    return framesSent;
  };

  void setFramesReceived (int64_t framesReceived) {
    this->framesReceived = framesReceived;
  };

  int64_t getFramesReceived () {
    return framesReceived;
  };

  void setFramesDecoded (int64_t framesDecoded) {
    this->framesDecoded = framesDecoded;
  };

  int64_t getFramesDecoded () {
    return framesDecoded;
  };

  void setFramesDropped (int64_t framesDropped) {
    this->framesDropped = framesDropped;
  };

  int64_t getFramesDropped () {
    return framesDropped;
  };

  void setFramesCorrupted (int64_t framesCorrupted) {
    this->framesCorrupted = framesCorrupted;
  };

  int64_t getFramesCorrupted () {
    return framesCorrupted;
  };

  void setAudioLevel (double audioLevel) {
    this->audioLevel = audioLevel;
  };

  double getAudioLevel () {
    return audioLevel;
  };

  void setEchoReturnLoss (double echoReturnLoss) {
    this->echoReturnLoss = echoReturnLoss;
  };

  double getEchoReturnLoss () {
    return echoReturnLoss;
  };

  void setEchoReturnLossEnhancement (double echoReturnLossEnhancement) {
    this->echoReturnLossEnhancement = echoReturnLossEnhancement;
  };

  double getEchoReturnLossEnhancement () {
    return echoReturnLossEnhancement;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RTCMediaStreamTrackStats ();

    };

    RegisterParent::registerType ("kurento.RTCMediaStreamTrackStats", func);
  }

protected:

  RTCMediaStreamTrackStats() = default;

private:

  std::string trackIdentifier;
  bool remoteSource;
  std::vector<std::string> ssrcIds;
  int64_t frameWidth;
  int64_t frameHeight;
  double framesPerSecond;
  int64_t framesSent;
  int64_t framesReceived;
  int64_t framesDecoded;
  int64_t framesDropped;
  int64_t framesCorrupted;
  double audioLevel;
  double echoReturnLoss;
  double echoReturnLossEnhancement;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCMediaStreamTrackStats> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCMEDIA_STREAM_TRACK_STATS_HPP__ */
