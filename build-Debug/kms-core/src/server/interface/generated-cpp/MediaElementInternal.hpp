/* Autogenerated with kurento-module-creator */

#ifndef __MEDIA_ELEMENT_INTERNAL_HPP__
#define __MEDIA_ELEMENT_INTERNAL_HPP__

#include "MediaElement.hpp"

namespace kurento
{
class JsonSerializer;
}

namespace kurento
{
class MediaType;
class ElementConnectionData;
class MediaElement;
class AudioCaps;
class VideoCaps;
class GstreamerDotDetails;
class Stats;
} /* kurento */

namespace kurento
{

class MediaElementMethodGetSourceConnections
{
public:
  MediaElementMethodGetSourceConnections() = default;
  ~MediaElementMethodGetSourceConnections() = default;

  std::vector<std::shared_ptr<ElementConnectionData>> invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
    __isSetMediaType = true;
  }

  std::string getDescription () {
    return description;
  }

  void setDescription (const std::string &description) {
    this->description = description;
    __isSetDescription = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  bool __isSetMediaType = false;
  std::string description;
  bool __isSetDescription = false;
};

class MediaElementMethodGetSinkConnections
{
public:
  MediaElementMethodGetSinkConnections() = default;
  ~MediaElementMethodGetSinkConnections() = default;

  std::vector<std::shared_ptr<ElementConnectionData>> invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
    __isSetMediaType = true;
  }

  std::string getDescription () {
    return description;
  }

  void setDescription (const std::string &description) {
    this->description = description;
    __isSetDescription = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  bool __isSetMediaType = false;
  std::string description;
  bool __isSetDescription = false;
};

class MediaElementMethodConnect
{
public:
  MediaElementMethodConnect() = default;
  ~MediaElementMethodConnect() = default;

  void invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaElement> getSink () {
    return sink;
  }

  void setSink (std::shared_ptr<MediaElement> sink) {
    this->sink = sink;
  }

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
    __isSetMediaType = true;
  }

  std::string getSourceMediaDescription () {
    return sourceMediaDescription;
  }

  void setSourceMediaDescription (const std::string &sourceMediaDescription) {
    this->sourceMediaDescription = sourceMediaDescription;
    __isSetSourceMediaDescription = true;
  }

  std::string getSinkMediaDescription () {
    return sinkMediaDescription;
  }

  void setSinkMediaDescription (const std::string &sinkMediaDescription) {
    this->sinkMediaDescription = sinkMediaDescription;
    __isSetSinkMediaDescription = true;
  }

private:
  std::shared_ptr<MediaElement> sink;
  std::shared_ptr<MediaType> mediaType;
  bool __isSetMediaType = false;
  std::string sourceMediaDescription;
  bool __isSetSourceMediaDescription = false;
  std::string sinkMediaDescription;
  bool __isSetSinkMediaDescription = false;
};

class MediaElementMethodDisconnect
{
public:
  MediaElementMethodDisconnect() = default;
  ~MediaElementMethodDisconnect() = default;

  void invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaElement> getSink () {
    return sink;
  }

  void setSink (std::shared_ptr<MediaElement> sink) {
    this->sink = sink;
  }

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
    __isSetMediaType = true;
  }

  std::string getSourceMediaDescription () {
    return sourceMediaDescription;
  }

  void setSourceMediaDescription (const std::string &sourceMediaDescription) {
    this->sourceMediaDescription = sourceMediaDescription;
    __isSetSourceMediaDescription = true;
  }

  std::string getSinkMediaDescription () {
    return sinkMediaDescription;
  }

  void setSinkMediaDescription (const std::string &sinkMediaDescription) {
    this->sinkMediaDescription = sinkMediaDescription;
    __isSetSinkMediaDescription = true;
  }

private:
  std::shared_ptr<MediaElement> sink;
  std::shared_ptr<MediaType> mediaType;
  bool __isSetMediaType = false;
  std::string sourceMediaDescription;
  bool __isSetSourceMediaDescription = false;
  std::string sinkMediaDescription;
  bool __isSetSinkMediaDescription = false;
};

class MediaElementMethodSetAudioFormat
{
public:
  MediaElementMethodSetAudioFormat() = default;
  ~MediaElementMethodSetAudioFormat() = default;

  void invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<AudioCaps> getCaps () {
    return caps;
  }

  void setCaps (std::shared_ptr<AudioCaps> caps) {
    this->caps = caps;
  }

private:
  std::shared_ptr<AudioCaps> caps;
};

class MediaElementMethodSetVideoFormat
{
public:
  MediaElementMethodSetVideoFormat() = default;
  ~MediaElementMethodSetVideoFormat() = default;

  void invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<VideoCaps> getCaps () {
    return caps;
  }

  void setCaps (std::shared_ptr<VideoCaps> caps) {
    this->caps = caps;
  }

private:
  std::shared_ptr<VideoCaps> caps;
};

class MediaElementMethodGetGstreamerDot
{
public:
  MediaElementMethodGetGstreamerDot() = default;
  ~MediaElementMethodGetGstreamerDot() = default;

  std::string invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<GstreamerDotDetails> getDetails () {
    return details;
  }

  void setDetails (std::shared_ptr<GstreamerDotDetails> details) {
    this->details = details;
    __isSetDetails = true;
  }

private:
  std::shared_ptr<GstreamerDotDetails> details;
  bool __isSetDetails = false;
};

class MediaElementMethodSetOutputBitrate
{
public:
  MediaElementMethodSetOutputBitrate() = default;
  ~MediaElementMethodSetOutputBitrate() = default;

  void invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  int getBitrate () {
    return bitrate;
  }

  void setBitrate (int bitrate) {
    this->bitrate = bitrate;
  }

private:
  int bitrate;
};

class MediaElementMethodGetStats
{
public:
  MediaElementMethodGetStats() = default;
  ~MediaElementMethodGetStats() = default;

  std::map <std::string,std::shared_ptr<Stats>> invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
    __isSetMediaType = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  bool __isSetMediaType = false;
};

class MediaElementMethodIsMediaFlowingIn
{
public:
  MediaElementMethodIsMediaFlowingIn() = default;
  ~MediaElementMethodIsMediaFlowingIn() = default;

  bool invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
  }

  std::string getSinkMediaDescription () {
    return sinkMediaDescription;
  }

  void setSinkMediaDescription (const std::string &sinkMediaDescription) {
    this->sinkMediaDescription = sinkMediaDescription;
    __isSetSinkMediaDescription = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  std::string sinkMediaDescription;
  bool __isSetSinkMediaDescription = false;
};

class MediaElementMethodIsMediaFlowingOut
{
public:
  MediaElementMethodIsMediaFlowingOut() = default;
  ~MediaElementMethodIsMediaFlowingOut() = default;

  bool invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
  }

  std::string getSourceMediaDescription () {
    return sourceMediaDescription;
  }

  void setSourceMediaDescription (const std::string &sourceMediaDescription) {
    this->sourceMediaDescription = sourceMediaDescription;
    __isSetSourceMediaDescription = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  std::string sourceMediaDescription;
  bool __isSetSourceMediaDescription = false;
};

class MediaElementMethodIsMediaTranscoding
{
public:
  MediaElementMethodIsMediaTranscoding() = default;
  ~MediaElementMethodIsMediaTranscoding() = default;

  bool invoke (std::shared_ptr<MediaElement> obj);
  void Serialize (JsonSerializer &serializer);

  std::shared_ptr<MediaType> getMediaType () {
    return mediaType;
  }

  void setMediaType (std::shared_ptr<MediaType> mediaType) {
    this->mediaType = mediaType;
  }

  std::string getBinName () {
    return binName;
  }

  void setBinName (const std::string &binName) {
    this->binName = binName;
    __isSetBinName = true;
  }

private:
  std::shared_ptr<MediaType> mediaType;
  std::string binName;
  bool __isSetBinName = false;
};

} /* kurento */

#endif /*  __MEDIA_ELEMENT_INTERNAL_HPP__ */
