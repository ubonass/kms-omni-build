/* Autogenerated with kurento-module-creator */

#ifndef __RTCPEER_CONNECTION_STATS_HPP__
#define __RTCPEER_CONNECTION_STATS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "RTCStats.hpp"


namespace kurento
{
class RTCPeerConnectionStats;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCPeerConnectionStats> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class RTCPeerConnectionStats : public RTCStats
{

public:

  RTCPeerConnectionStats (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, int64_t dataChannelsOpened, int64_t dataChannelsClosed) : RTCStats (id, type, timestamp, timestampMillis) {
    this->dataChannelsOpened = dataChannelsOpened;
    this->dataChannelsClosed = dataChannelsClosed;
  };

  void setDataChannelsOpened (int64_t dataChannelsOpened) {
    this->dataChannelsOpened = dataChannelsOpened;
  };

  int64_t getDataChannelsOpened () {
    return dataChannelsOpened;
  };

  void setDataChannelsClosed (int64_t dataChannelsClosed) {
    this->dataChannelsClosed = dataChannelsClosed;
  };

  int64_t getDataChannelsClosed () {
    return dataChannelsClosed;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RTCPeerConnectionStats ();

    };

    RegisterParent::registerType ("kurento.RTCPeerConnectionStats", func);
  }

protected:

  RTCPeerConnectionStats() = default;

private:

  int64_t dataChannelsOpened;
  int64_t dataChannelsClosed;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCPeerConnectionStats> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCPEER_CONNECTION_STATS_HPP__ */
