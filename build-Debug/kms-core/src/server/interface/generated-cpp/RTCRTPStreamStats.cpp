/* Autogenerated with kurento-module-creator */

#include "RTCRTPStreamStats.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

namespace kurento
{

void RTCRTPStreamStats::Serialize (JsonSerializer &s)
{
  RTCStats::Serialize (s);


  if (s.IsWriter) {
    s.JsonValue["__type__"] = "RTCRTPStreamStats";
    s.JsonValue["__module__"] = "kurento";

    s.SerializeNVP (ssrc);

    s.SerializeNVP (associateStatsId);

    s.SerializeNVP (isRemote);

    s.SerializeNVP (mediaTrackId);

    s.SerializeNVP (transportId);

    s.SerializeNVP (codecId);

    s.SerializeNVP (firCount);

    s.SerializeNVP (pliCount);

    s.SerializeNVP (nackCount);

    s.SerializeNVP (sliCount);

    s.SerializeNVP (remb);

    s.SerializeNVP (packetsLost);

    s.SerializeNVP (fractionLost);

  } else {
    if (!s.JsonValue.isMember ("ssrc") || !s.JsonValue["ssrc"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'ssrc' property should be a string");
    }

    s.SerializeNVP (ssrc);

    if (!s.JsonValue.isMember ("associateStatsId") || !s.JsonValue["associateStatsId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'associateStatsId' property should be a string");
    }

    s.SerializeNVP (associateStatsId);

    if (!s.JsonValue.isMember ("isRemote") || !s.JsonValue["isRemote"].isConvertibleTo (Json::ValueType::booleanValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'isRemote' property should be a boolean");
    }

    s.SerializeNVP (isRemote);

    if (!s.JsonValue.isMember ("mediaTrackId") || !s.JsonValue["mediaTrackId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'mediaTrackId' property should be a string");
    }

    s.SerializeNVP (mediaTrackId);

    if (!s.JsonValue.isMember ("transportId") || !s.JsonValue["transportId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'transportId' property should be a string");
    }

    s.SerializeNVP (transportId);

    if (!s.JsonValue.isMember ("codecId") || !s.JsonValue["codecId"].isConvertibleTo (Json::ValueType::stringValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'codecId' property should be a string");
    }

    s.SerializeNVP (codecId);

    if (!s.JsonValue.isMember ("firCount") || !s.JsonValue["firCount"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'firCount' property should be a int64");
    }

    s.SerializeNVP (firCount);

    if (!s.JsonValue.isMember ("pliCount") || !s.JsonValue["pliCount"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'pliCount' property should be a int64");
    }

    s.SerializeNVP (pliCount);

    if (!s.JsonValue.isMember ("nackCount") || !s.JsonValue["nackCount"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'nackCount' property should be a int64");
    }

    s.SerializeNVP (nackCount);

    if (!s.JsonValue.isMember ("sliCount") || !s.JsonValue["sliCount"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'sliCount' property should be a int64");
    }

    s.SerializeNVP (sliCount);

    if (!s.JsonValue.isMember ("remb") || !s.JsonValue["remb"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'remb' property should be a int64");
    }

    s.SerializeNVP (remb);

    if (!s.JsonValue.isMember ("packetsLost") || !s.JsonValue["packetsLost"].isConvertibleTo (Json::ValueType::int64Value) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'packetsLost' property should be a int64");
    }

    s.SerializeNVP (packetsLost);

    if (!s.JsonValue.isMember ("fractionLost") || !s.JsonValue["fractionLost"].isConvertibleTo (Json::ValueType::realValue) ) {
      throw KurentoException (MARSHALL_ERROR,
                              "'fractionLost' property should be a double");
    }

    s.SerializeNVP (fractionLost);

  }
}

} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::RTCRTPStreamStats> &object, JsonSerializer &s)
{
  if (!s.IsWriter && !object) {
    if (!s.JsonValue.isMember ("__type__") || !s.JsonValue["__type__"].isConvertibleTo (Json::ValueType::stringValue) || !s.JsonValue.isMember ("__module__") || !s.JsonValue["__module__"].isConvertibleTo (Json::ValueType::stringValue)) {
      object.reset (new kurento::RTCRTPStreamStats() );
    } else {
      auto ptr = kurento::RegisterParent::createRegister (s.JsonValue["__module__"].asString () + "." + s.JsonValue["__type__"].asString ());

      if (!ptr) {
        throw KurentoException (UNEXPECTED_ERROR,
                                "Type " + s.JsonValue["__type__"].asString () + " does not exist in module " + s.JsonValue["__module__"].asString ());
      }

      object.reset (dynamic_cast <kurento::RTCRTPStreamStats*> (ptr));

      if (!object) {
        delete ptr;
        throw KurentoException (UNEXPECTED_ERROR, "Type " + s.JsonValue["__type__"].asString () + " is not compatible");
      }
    }
  }

  if (object) {
    object->Serialize (s);
  }
}

} /* kurento */