/* Autogenerated with kurento-module-creator */

#ifndef __RTCICE_CANDIDATE_PAIR_STATS_HPP__
#define __RTCICE_CANDIDATE_PAIR_STATS_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "RTCStats.hpp"


namespace kurento
{
class RTCStatsIceCandidatePairState;
} /* kurento */

namespace kurento
{
class RTCIceCandidatePairStats;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCIceCandidatePairStats> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{
class RTCStatsIceCandidatePairState;










class RTCIceCandidatePairStats : public RTCStats
{

public:

  RTCIceCandidatePairStats (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, const std::string &transportId, const std::string &localCandidateId, const std::string &remoteCandidateId, std::shared_ptr<RTCStatsIceCandidatePairState> state, int64_t priority, bool nominated, bool writable, bool readable, int64_t bytesSent, int64_t bytesReceived, double roundTripTime, double availableOutgoingBitrate, double availableIncomingBitrate) : RTCStats (id, type, timestamp, timestampMillis) {
    this->transportId = transportId;
    this->localCandidateId = localCandidateId;
    this->remoteCandidateId = remoteCandidateId;
    this->state = state;
    this->priority = priority;
    this->nominated = nominated;
    this->writable = writable;
    this->readable = readable;
    this->bytesSent = bytesSent;
    this->bytesReceived = bytesReceived;
    this->roundTripTime = roundTripTime;
    this->availableOutgoingBitrate = availableOutgoingBitrate;
    this->availableIncomingBitrate = availableIncomingBitrate;
  };

  void setTransportId (const std::string &transportId) {
    this->transportId = transportId;
  };

  std::string getTransportId () {
    return transportId;
  };

  void setLocalCandidateId (const std::string &localCandidateId) {
    this->localCandidateId = localCandidateId;
  };

  std::string getLocalCandidateId () {
    return localCandidateId;
  };

  void setRemoteCandidateId (const std::string &remoteCandidateId) {
    this->remoteCandidateId = remoteCandidateId;
  };

  std::string getRemoteCandidateId () {
    return remoteCandidateId;
  };

  void setState (std::shared_ptr<RTCStatsIceCandidatePairState> state) {
    this->state = state;
  };

  std::shared_ptr<RTCStatsIceCandidatePairState> getState () {
    return state;
  };

  void setPriority (int64_t priority) {
    this->priority = priority;
  };

  int64_t getPriority () {
    return priority;
  };

  void setNominated (bool nominated) {
    this->nominated = nominated;
  };

  bool getNominated () {
    return nominated;
  };

  void setWritable (bool writable) {
    this->writable = writable;
  };

  bool getWritable () {
    return writable;
  };

  void setReadable (bool readable) {
    this->readable = readable;
  };

  bool getReadable () {
    return readable;
  };

  void setBytesSent (int64_t bytesSent) {
    this->bytesSent = bytesSent;
  };

  int64_t getBytesSent () {
    return bytesSent;
  };

  void setBytesReceived (int64_t bytesReceived) {
    this->bytesReceived = bytesReceived;
  };

  int64_t getBytesReceived () {
    return bytesReceived;
  };

  void setRoundTripTime (double roundTripTime) {
    this->roundTripTime = roundTripTime;
  };

  double getRoundTripTime () {
    return roundTripTime;
  };

  void setAvailableOutgoingBitrate (double availableOutgoingBitrate) {
    this->availableOutgoingBitrate = availableOutgoingBitrate;
  };

  double getAvailableOutgoingBitrate () {
    return availableOutgoingBitrate;
  };

  void setAvailableIncomingBitrate (double availableIncomingBitrate) {
    this->availableIncomingBitrate = availableIncomingBitrate;
  };

  double getAvailableIncomingBitrate () {
    return availableIncomingBitrate;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RTCIceCandidatePairStats ();

    };

    RegisterParent::registerType ("kurento.RTCIceCandidatePairStats", func);
  }

protected:

  RTCIceCandidatePairStats() = default;

private:

  std::string transportId;
  std::string localCandidateId;
  std::string remoteCandidateId;
  std::shared_ptr<RTCStatsIceCandidatePairState> state;
  int64_t priority;
  bool nominated;
  bool writable;
  bool readable;
  int64_t bytesSent;
  int64_t bytesReceived;
  double roundTripTime;
  double availableOutgoingBitrate;
  double availableIncomingBitrate;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCIceCandidatePairStats> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCICE_CANDIDATE_PAIR_STATS_HPP__ */
