/* Autogenerated with kurento-module-creator */

#ifndef __RTCDATA_CHANNEL_STATE_HPP__
#define __RTCDATA_CHANNEL_STATE_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>


namespace kurento
{
class RTCDataChannelState;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCDataChannelState> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{

class RTCDataChannelState
{

public:

  typedef enum {
    connecting,
    open,
    closing,
    closed
  } type;

  RTCDataChannelState (const std::string &value) {
    enumValue = getValueFromString (value);
  };

  RTCDataChannelState (type value) {
    this->enumValue = value;
  }

  type getValue () {
    return enumValue;
  };

  std::string getString () {

    if (enumValue ==  connecting) {
      return "connecting";
    }

    if (enumValue ==  open) {
      return "open";
    }

    if (enumValue ==  closing) {
      return "closing";
    }

    if (enumValue ==  closed) {
      return "closed";
    }

    return "";
  }

  void Serialize (JsonSerializer &s);

  RTCDataChannelState() = default;

private:

  static type getValueFromString (const std::string &value);

  type enumValue;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCDataChannelState> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCDATA_CHANNEL_STATE_HPP__ */
