/* Autogenerated with kurento-module-creator */

#ifndef __RTCICE_CANDIDATE_ATTRIBUTES_HPP__
#define __RTCICE_CANDIDATE_ATTRIBUTES_HPP__

#include <json/json.h>
#include <jsonrpc/JsonRpcException.hpp>
#include <memory>
#include "RTCStats.hpp"


namespace kurento
{
class RTCStatsIceCandidateType;
} /* kurento */

namespace kurento
{
class RTCIceCandidateAttributes;
} /* kurento */

namespace kurento
{
class JsonSerializer;
void Serialize (std::shared_ptr<kurento::RTCIceCandidateAttributes> &object, JsonSerializer &s);
} /* kurento */

namespace kurento
{
class RTCStatsIceCandidateType;



class RTCIceCandidateAttributes : public RTCStats
{

public:

  RTCIceCandidateAttributes (const std::string &id, std::shared_ptr<StatsType> type, double timestamp, int64_t timestampMillis, const std::string &ipAddress, int64_t portNumber, const std::string &transport, std::shared_ptr<RTCStatsIceCandidateType> candidateType, int64_t priority, const std::string &addressSourceUrl) : RTCStats (id, type, timestamp, timestampMillis) {
    this->ipAddress = ipAddress;
    this->portNumber = portNumber;
    this->transport = transport;
    this->candidateType = candidateType;
    this->priority = priority;
    this->addressSourceUrl = addressSourceUrl;
  };

  void setIpAddress (const std::string &ipAddress) {
    this->ipAddress = ipAddress;
  };

  std::string getIpAddress () {
    return ipAddress;
  };

  void setPortNumber (int64_t portNumber) {
    this->portNumber = portNumber;
  };

  int64_t getPortNumber () {
    return portNumber;
  };

  void setTransport (const std::string &transport) {
    this->transport = transport;
  };

  std::string getTransport () {
    return transport;
  };

  void setCandidateType (std::shared_ptr<RTCStatsIceCandidateType> candidateType) {
    this->candidateType = candidateType;
  };

  std::shared_ptr<RTCStatsIceCandidateType> getCandidateType () {
    return candidateType;
  };

  void setPriority (int64_t priority) {
    this->priority = priority;
  };

  int64_t getPriority () {
    return priority;
  };

  void setAddressSourceUrl (const std::string &addressSourceUrl) {
    this->addressSourceUrl = addressSourceUrl;
  };

  std::string getAddressSourceUrl () {
    return addressSourceUrl;
  };

  void Serialize (JsonSerializer &s) override;

  static void registerType () {
    std::function<RegisterParent*(void)> func =
        [] () {

      return new RTCIceCandidateAttributes ();

    };

    RegisterParent::registerType ("kurento.RTCIceCandidateAttributes", func);
  }

protected:

  RTCIceCandidateAttributes() = default;

private:

  std::string ipAddress;
  int64_t portNumber;
  std::string transport;
  std::shared_ptr<RTCStatsIceCandidateType> candidateType;
  int64_t priority;
  std::string addressSourceUrl;

  friend void kurento::Serialize (std::shared_ptr<kurento::RTCIceCandidateAttributes> &object, JsonSerializer &s);

};

} /* kurento */

#endif /*  __RTCICE_CANDIDATE_ATTRIBUTES_HPP__ */
