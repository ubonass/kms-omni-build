/* Autogenerated with kurento-module-creator */

#include "RembParams.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>

namespace kurento
{

void RembParams::Serialize (JsonSerializer &s)
{

  if (s.IsWriter) {
    s.JsonValue["__type__"] = "RembParams";
    s.JsonValue["__module__"] = "kurento";

    if (__isSetPacketsRecvIntervalTop) {
      s.SerializeNVP (packetsRecvIntervalTop);
    }

    if (__isSetExponentialFactor) {
      s.SerializeNVP (exponentialFactor);
    }

    if (__isSetLinealFactorMin) {
      s.SerializeNVP (linealFactorMin);
    }

    if (__isSetLinealFactorGrade) {
      s.SerializeNVP (linealFactorGrade);
    }

    if (__isSetDecrementFactor) {
      s.SerializeNVP (decrementFactor);
    }

    if (__isSetThresholdFactor) {
      s.SerializeNVP (thresholdFactor);
    }

    if (__isSetUpLosses) {
      s.SerializeNVP (upLosses);
    }

    if (__isSetRembOnConnect) {
      s.SerializeNVP (rembOnConnect);
    }

  } else {
    if (s.JsonValue.isMember ("packetsRecvIntervalTop") ) {
      if (s.JsonValue["packetsRecvIntervalTop"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetPacketsRecvIntervalTop = true;
        s.SerializeNVP (packetsRecvIntervalTop);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'packetsRecvIntervalTop' property should be a integer");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "100";
      reader.parse (defaultValue, s.JsonValue["packetsRecvIntervalTop"]);
      if (s.JsonValue["packetsRecvIntervalTop"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetPacketsRecvIntervalTop = true;
        s.SerializeNVP (packetsRecvIntervalTop);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'packetsRecvIntervalTop' property should be a integer");
      }
    }

    if (s.JsonValue.isMember ("exponentialFactor") ) {
      if (s.JsonValue["exponentialFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetExponentialFactor = true;
        s.SerializeNVP (exponentialFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'exponentialFactor' property should be a double");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "0.04";
      reader.parse (defaultValue, s.JsonValue["exponentialFactor"]);
      if (s.JsonValue["exponentialFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetExponentialFactor = true;
        s.SerializeNVP (exponentialFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'exponentialFactor' property should be a double");
      }
    }

    if (s.JsonValue.isMember ("linealFactorMin") ) {
      if (s.JsonValue["linealFactorMin"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetLinealFactorMin = true;
        s.SerializeNVP (linealFactorMin);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'linealFactorMin' property should be a integer");
      }
    }

    if (s.JsonValue.isMember ("linealFactorGrade") ) {
      if (s.JsonValue["linealFactorGrade"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetLinealFactorGrade = true;
        s.SerializeNVP (linealFactorGrade);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'linealFactorGrade' property should be a double");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "30";
      reader.parse (defaultValue, s.JsonValue["linealFactorGrade"]);
      if (s.JsonValue["linealFactorGrade"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetLinealFactorGrade = true;
        s.SerializeNVP (linealFactorGrade);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'linealFactorGrade' property should be a double");
      }
    }

    if (s.JsonValue.isMember ("decrementFactor") ) {
      if (s.JsonValue["decrementFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetDecrementFactor = true;
        s.SerializeNVP (decrementFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'decrementFactor' property should be a double");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "0.5";
      reader.parse (defaultValue, s.JsonValue["decrementFactor"]);
      if (s.JsonValue["decrementFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetDecrementFactor = true;
        s.SerializeNVP (decrementFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'decrementFactor' property should be a double");
      }
    }

    if (s.JsonValue.isMember ("thresholdFactor") ) {
      if (s.JsonValue["thresholdFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetThresholdFactor = true;
        s.SerializeNVP (thresholdFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'thresholdFactor' property should be a double");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "0.8";
      reader.parse (defaultValue, s.JsonValue["thresholdFactor"]);
      if (s.JsonValue["thresholdFactor"].isConvertibleTo (Json::ValueType::realValue) ) {
        __isSetThresholdFactor = true;
        s.SerializeNVP (thresholdFactor);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'thresholdFactor' property should be a double");
      }
    }

    if (s.JsonValue.isMember ("upLosses") ) {
      if (s.JsonValue["upLosses"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetUpLosses = true;
        s.SerializeNVP (upLosses);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'upLosses' property should be a integer");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "12";
      reader.parse (defaultValue, s.JsonValue["upLosses"]);
      if (s.JsonValue["upLosses"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetUpLosses = true;
        s.SerializeNVP (upLosses);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'upLosses' property should be a integer");
      }
    }

    if (s.JsonValue.isMember ("rembOnConnect") ) {
      if (s.JsonValue["rembOnConnect"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetRembOnConnect = true;
        s.SerializeNVP (rembOnConnect);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                                "'rembOnConnect' property should be a integer");
      }
    } else {
      Json::Reader reader;
      std::string defaultValue = "300000";
      reader.parse (defaultValue, s.JsonValue["rembOnConnect"]);
      if (s.JsonValue["rembOnConnect"].isConvertibleTo (Json::ValueType::intValue) ) {
        __isSetRembOnConnect = true;
        s.SerializeNVP (rembOnConnect);
      } else {
        throw KurentoException (MARSHALL_ERROR,
                               "Default value of 'rembOnConnect' property should be a integer");
      }
    }

  }
}

} /* kurento */

namespace kurento
{

void
Serialize (std::shared_ptr<kurento::RembParams> &object, JsonSerializer &s)
{
  if (!s.IsWriter && !object) {
    if (!s.JsonValue.isMember ("__type__") || !s.JsonValue["__type__"].isConvertibleTo (Json::ValueType::stringValue) || !s.JsonValue.isMember ("__module__") || !s.JsonValue["__module__"].isConvertibleTo (Json::ValueType::stringValue)) {
      object.reset (new kurento::RembParams() );
    } else {
      auto ptr = kurento::RegisterParent::createRegister (s.JsonValue["__module__"].asString () + "." + s.JsonValue["__type__"].asString ());

      if (!ptr) {
        throw KurentoException (UNEXPECTED_ERROR,
                                "Type " + s.JsonValue["__type__"].asString () + " does not exist in module " + s.JsonValue["__module__"].asString ());
      }

      object.reset (dynamic_cast <kurento::RembParams*> (ptr));

      if (!object) {
        delete ptr;
        throw KurentoException (UNEXPECTED_ERROR, "Type " + s.JsonValue["__type__"].asString () + " is not compatible");
      }
    }
  }

  if (object) {
    object->Serialize (s);
  }
}

} /* kurento */